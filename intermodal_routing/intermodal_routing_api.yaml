openapi: 3.0.2
info:
  title: Intermodal Routing API
  version: 8.0.1
  description: |
    Intermodal Routing is a REST API that offers an innovative and smart routing
    experience in urban areas to navigate between a given pair of locations.
    This is possible when the consolidated public transit offer is intertwined
    with external mobility services dynamically scattered in urban areas.
  termsOfService: http://developer.here.com/terms-conditions
  license:
    name: HERE Documentation License
    url: https://legal.here.com/en-gb/terms/documentation-license
  x-document-meta-data:
    copyright: "Â© 2022 HERE Europe B.V."
    document-id: 31d0fe1f-c7d2-4043-8b01-b5a214a3f001
    date-created: '2022-03-29T22:20:12+00:00'
servers:
- url: https://intermodal.router.hereapi.com/v8
  description: Intermodal Routing Service
security:
- Bearer: []
- ApiKey: []
paths:
  "/routes":
    get:
      operationId: getIntermodalRoutes
      summary: Routes
      tags:
      - Intermodal Routing
      description: |
        Lists intermodal routes.
        All or a combination of the following services may be utilized by the
        intermodal algorithm to generate intermodal routes:

        * Vehicle routing.
        * Intermodal routing with real-time and timetable departures.
        * Pedestrian routing with pedestrian connectivity.
        * Park and Ride service that combines vehicle and public transit routing.
        * Real-time traffic and traffic incidents.
        * Public transit service delays/disruptions information from transit authorities.
        * Amenities available at transit stations or nearby (such as parking, EV charging stations, etc.).
        * Sharing services available at transit stations or nearby (such as car sharing, taxi, bicycle, etc.).
      parameters:
      - "$ref": "#/components/parameters/origin"
      - "$ref": "#/components/parameters/destination"
      - "$ref": "#/components/parameters/intermodalVia"
      - "$ref": "#/components/parameters/lang"
      - "$ref": "#/components/parameters/units"
      - "$ref": "#/components/parameters/departureTime"
      - "$ref": "#/components/parameters/arrivalTime"
      - "$ref": "#/components/parameters/alternatives"
      - "$ref": "#/components/parameters/changes"
      - "$ref": "#/components/parameters/pedestrianSpeed"
      - "$ref": "#/components/parameters/pedestrianMaxDistance"
      - "$ref": "#/components/parameters/transitModes"
      - "$ref": "#/components/parameters/transitEnable"
      - "$ref": "#/components/parameters/vehicleModes"
      - "$ref": "#/components/parameters/vehicleEnable"
      - "$ref": "#/components/parameters/taxiModes"
      - "$ref": "#/components/parameters/taxiEnable"
      - "$ref": "#/components/parameters/rentedModes"
      - "$ref": "#/components/parameters/rentedEnable"
      - "$ref": "#/components/parameters/transitReturn"
      responses:
        200:
          description: API response in case of success
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/IntermodalRouteResponse"
          headers:
            X-Correlation-Id:
              "$ref": "#/components/headers/X-Correlation-Id"
        400:
          "$ref": "#/components/responses/400ErrorResponse"
        401:
          "$ref": "#/components/responses/401ErrorResponse"
        403:
          "$ref": "#/components/responses/403ErrorResponse"
        500:
          "$ref": "#/components/responses/500ErrorResponse"
        502:
          "$ref": "#/components/responses/502ErrorResponse"
        503:
          "$ref": "#/components/responses/503ErrorResponse"
        504:
          "$ref": "#/components/responses/504ErrorResponse"
  "/health":
    get:
      operationId: getHealth
      summary: Health
      tags:
      - Intermodal Routing
      description: Returns the health of the service
      security: []
      responses:
        200:
          "$ref": "#/components/responses/HealthResponseOk"
        default:
          "$ref": "#/components/responses/HealthResponseFail"
  "/version":
    get:
      operationId: getVersion
      summary: Version
      tags:
      - Intermodal Routing
      description: Returns the version of the service
      security: []
      responses:
        200:
          "$ref": "#/components/responses/VersionResponseOk"
        500:
          "$ref": "#/components/responses/500ErrorResponse"
        502:
          "$ref": "#/components/responses/502ErrorResponse"
        503:
          "$ref": "#/components/responses/503ErrorResponse"
        504:
          "$ref": "#/components/responses/504ErrorResponse"
components:
  parameters:
    alternatives:
      name: alternatives
      description: Number of alternative routes to return aside from the optimal route.
      in: query
      required: false
      schema:
        type: integer
        minimum: 0
        maximum: 6
        default: 0
    arrivalTime:
      name: arrivalTime
      description: |
        Specifies the time of arrival as defined by either `date-time` or `full-date` `T` `partial-time` in `RFC 3339`, section 5.6 (for example, `2019-06-24T01:23:45`).
        The requested time is converted to the local time at destination. When the optional timezone offset is
        not specified, time is assumed to be local.
        All `Time` values in the response are returned in the timezone of each location.

        Note : The following features do not support the arrivalTime parameter:
        * EV Routing
        * Route Handle
        * Route Import
      in: query
      allowReserved: true
      required: false
      schema:
        "$ref": "#/components/schemas/Time"
    changes:
      name: changes
      description: 'Maximum number of changes or transfers allowed in a route. Unlimited
        number of changes is permitted when not set.

'
      in: query
      schema:
        type: integer
        minimum: 0
        maximum: 6
    departureTime:
      name: departureTime
      description: |
        Specifies the time of departure as defined by either `date-time` or `full-date` `T` `partial-time` in `RFC 3339`, section 5.6 (for example, `2019-06-24T01:23:45`).
        The requested time is converted to the local time at origin. When the optional timezone offset is
        not specified, time is assumed to be local. If neither `departureTime` or `arrivalTime` are specified, current time at departure location will be used.
        All `Time` values in the response are returned in the timezone of each location.
      in: query
      allowReserved: true
      required: false
      schema:
        "$ref": "#/components/schemas/Time"
    destination:
      name: destination
      description: |+
        Trip destination WGS-84 compliant coordinates.

        Format: `{lat},{lng}[;placeName={name}]`

        The optional `placeName` parameter can be used to customize the
          name of the destination place and will affect the generated actions descriptions.

      in: query
      required: true
      schema:
        "$ref": "#/components/schemas/LocationString"
    intermodalVia:
      name: via
      description: |
        Defines an intermediate via waypoint.

        At the moment via point is supported with the following syntax:

        `via=place:parkingLot;strategy={strategy}`: Defines the change between modes in a parking lot.
          The optional parameter `strategy` defines the search strategy for candidate parking lots.
          Here is a list of possible strategies:
          * `diverseChoices` (default): Parking lots close to the origin or close to the city border
            will be considered.
          * `parkLate`: switch from car to public transit as soon as possible after entering the
            destination city's limits.
          * `parkEarly`: try to switch from car to public transit as early as possible.
      in: query
      schema:
        type: string
    lang:
      name: lang
      description: 'Specifies the preferred language of the response. The value should
        comply with the [IETF BCP 47](https://www.rfc-editor.org/rfc/bcp/bcp47.txt).

'
      in: query
      schema:
        type: string
        default: en-US
    origin:
      name: origin
      description: |+
        Trip origin WGS-84 compliant coordinates.

        Format: `{lat},{lng}[;placeName={name}]`

        The optional `placeName` parameter can be used to customize
          the name of the origin place and will affect the generated actions descriptions.

      in: query
      required: true
      schema:
        "$ref": "#/components/schemas/LocationString"
    pedestrianMaxDistance:
      name: pedestrian[maxDistance]
      description: Maximum allowed walking distance in meters (e.g. when looking for
        nearest stations).
      in: query
      schema:
        type: integer
        minimum: 0
        maximum: 6000
        default: 2000
    pedestrianSpeed:
      name: pedestrian[speed]
      description: 'Walking speed in meters per second. Influences the duration of
        walking segments from origin to a station, from a station to destination and
        in-between the stations (e.g. if transfer is needed).

'
      in: query
      schema:
        "$ref": "#/components/schemas/PedestrianSpeed"
    rentedEnable:
      name: rented[enable]
      description: 'Route parts where the rented vehicle modes are allowed. By default,
        rented modes are allowed everywhere in the route.

'
      in: query
      schema:
        "$ref": "#/components/schemas/EnableInRouteAll"
      style: form
      explode: false
    rentedModes:
      name: rented[modes]
      description: 'Modes filter used to determine which rented modes to include in
        the response. By default, all supported rented modes are permitted.

'
      in: query
      schema:
        "$ref": "#/components/schemas/RentedModesFilter"
      style: form
      explode: false
    taxiEnable:
      name: taxi[enable]
      description: 'Route parts where the taxi vehicle modes are allowed. By default,
        taxi modes are allowed everywhere in the route.

'
      in: query
      schema:
        "$ref": "#/components/schemas/EnableInRouteAll"
      style: form
      explode: false
    taxiModes:
      name: taxi[modes]
      description: 'Modes filter used to determine which taxi modes to include in
        the response. By default, all supported taxi modes are permitted.

'
      in: query
      schema:
        "$ref": "#/components/schemas/TaxiModesFilter"
      style: deepObject
      explode: true
    transitEnable:
      name: transit[enable]
      description: 'Route parts where the transit modes are allowed. By default, transit
        modes are allowed everywhere in the route.

'
      in: query
      schema:
        "$ref": "#/components/schemas/EnableInRouteAll"
      style: form
      explode: false
    transitModes:
      name: transit[modes]
      description: 'Mode filter used to determine which transit modes to include in
        the response. By default, all supported transit modes are permitted.

'
      in: query
      schema:
        "$ref": "#/components/schemas/TransitModesFilter"
      style: form
      explode: false
    transitReturn:
      name: return
      description: |
        Defines which section attributes are included.

         * `intermediate` - List of intermediate stops within a section of the route. If
           enabled, the response includes `intermediateStops` attribute. Each intermediate stop includes
           stop/station names, WGS-84 geocoordinates, and the departure times at the stops.
         * `fares` - List of fares/tickets to cover a section of the route.
         * `polyline` - Polyline for the route in
           [Flexible Polyline](https://github.com/heremaps/flexible-polyline/blob/master/README.md)
           Encoding.
         * `actions` - Actions (such as maneuvers or tasks) that must be taken to complete the section.
         * `travelSummary` - Include summary for the travel portion of the section.
         * `incidents` - Include a list of all incidents applicable to each section.
         * `bookingLinks` - Include a list of links to book a ride for a section of the route.
      in: query
      schema:
        type: array
        uniqueItems: true
        items:
          type: string
          enum:
          - intermediate
          - fares
          - polyline
          - actions
          - travelSummary
          - incidents
          - bookingLinks
      style: form
      explode: false
    units:
      name: units
      description: Units of measurement used, for example, in guidance instructions.
        The default is `metric`.
      in: query
      schema:
        "$ref": "#/components/schemas/Units"
    vehicleEnable:
      name: vehicle[enable]
      description: 'Route parts where the private vehicle modes are allowed. By default,
        vehicle modes are not allowed.

'
      in: query
      schema:
        "$ref": "#/components/schemas/EnableInRouteNone"
      style: form
      explode: false
    vehicleModes:
      name: vehicle[modes]
      description: 'Modes filter used to determine which vehicle modes to include
        in the response.

'
      in: query
      schema:
        "$ref": "#/components/schemas/VehicleModesFilter"
      style: form
      explode: false
  headers:
    X-Correlation-Id:
      description: Auto-generated id that univocally identifies the request.
      schema:
        type: string
      example: 4199533b-6290-41db-8d79-edf4f4019a74
  securitySchemes:
    ApiKey:
      type: apiKey
      in: query
      name: apiKey
      description: 'A key generated specifically to authenticate API requests. For
        more information on how to get an API key, see https://developer.here.com/documentation/identity-access-management/dev_guide/index.html.

'
    Bearer:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        A token obtained from a separate endpoint using client credentials and an OAuth 1.0a HMAC-SHA256 signed request.
        For more information on how to get a bearer token, see https://developer.here.com/documentation/identity-access-management/dev_guide/index.html.
  schemas:
    AccessAttributes:
      description: "Extensible enum: `open` `noThrough` `tollRoad` `...`  \n`AccessAttributes`
        is applied to a span of a route section and describes access flags of a street.\n\n*
        `open`: A part of the route that can be traversed.\n* `noThrough`: A part
        of the route that can only be traversed if origin, destination or any via
        waypoint is located there.\n* `tollRoad`: Access to this part of the route
        is restricted with a fee (or toll).\n\nAs it is possible that new access attributes
        are supported in the future, unknown access attributes should be ignored.\n"
      type: string
      x-extensible-enum:
      - open
      - noThrough
      - tollRoad
    AttributionLinkType:
      description: |
        Attribution link type.

        * `disclaimer` - Page with further legal information from the agency.
        * `tariff` - Page with information on the tariff.
      type: string
      required:
      - type
      enum:
      - disclaimer
      - tariff
    AuthErrorResponseSchema:
      properties:
        error:
          type: string
          description: Human-readable error
        error_description:
          type: string
          description: Human-readable error description
    BaseNoticeDetail:
      properties:
        title:
          type: string
          description: Detail title
        cause:
          type: string
          description: Cause of the notice
        type:
          type: string
          description: |
            Detail type. Each type of detail might contain extra attributes.

            **NOTE:** The list of possible detail types may be extended in the future.
            The client application is expected to handle such a case gracefully.
      required:
      - type
    ChargingConnectorType:
      description: "Extensible enum: `iec62196Type1Combo` `iec62196Type2Combo` `chademo`
        `tesla` `...`  \nCurrently supported connector types are:\n* `iec62196Type1Combo`:
        \ Type 1 Combo connector, commonly called \"SAE J1772\"\n* `iec62196Type2Combo`:
        \ Type 2 Combo connector, commonly called \"Mennekes\"\n* `chademo`: CHAdeMO
        connector\n* `tesla`: Tesla connector\n"
      type: string
      x-extensible-enum:
      - iec62196Type1Combo
      - iec62196Type2Combo
      - chademo
      - tesla
    ChargingStationBrand:
      description: Information regarding the charging station brand
      properties:
        name:
          description: Charging station brand name
          type: string
        hrn:
          description: |
            Charging station brand unique ID.
            If specified in `ev[preferredBrands]` parameter
            then it would apply preference to adding stations of the given brand.

            **NOTE:** As of now it is generated as a brand name hash.
            It will be changed to HRN (HERE Resource Name) in the future.
          type: string
    ChargingSupplyType:
      description: "Extensible enum: `acSingle` `acThree` `dc` `...`  \nCurrently
        possible values are:\n\n* `acSingle` : Single phase Alternating Current supply\n*
        `acThree`: Three phase Alternating Current supply\n* `dc`: Direct Current
        supply\n"
      type: string
      x-extensible-enum:
      - acSingle
      - acThree
      - dc
    Color:
      type: string
      pattern: "#[0-9A-Fa-f]{6}"
      example: "#FF0000"
    CountryCode:
      description: ISO-3166-1 alpha-3 code
      type: string
      example: FRA
    DataVersion:
      description: Version of a specific data set
      properties:
        name:
          type: string
          description: Identifies a data set, for example, a HRN, or a service specific
            identifier
        version:
          type: string
          description: The current version of this data set
      required:
      - name
      - version
    DepartureDelay:
      description: The accumulated delay in seconds from the scheduled time of the
        event.
      type: integer
    DepartureStatus:
      description: "Extensible enum: `scheduled` `cancelled` `additional` `replaced`
        `...`  \nStatus of the departure\n\n* `scheduled`: A trip that is running
        as planned in the schedule.\n* `cancelled`: A trip that existed in the schedule
        but was removed.\n* `additional`: An extra trip that was added in addition
        to a running schedule, for example, to respond to sudden passenger load.\n*
        `replaced`: A trip that was in the schedule but is removed and replaced with
        `additional` trip, for example, to replace a broken vehicle or handle detour.\n"
      type: string
      x-extensible-enum:
      - scheduled
      - cancelled
      - additional
      - replaced
      default: scheduled
    Distance:
      type: integer
      minimum: 0
      description: Distance in meters.
    Duration:
      type: integer
      description: Duration in seconds.
    Energy:
      type: number
      description: Energy in kilowatt hours (kWh).
    ErrorResponse:
      description: Response in case of error
      properties:
        title:
          type: string
          description: Human-readable error description
          example: Input data failed validation
        status:
          type: integer
          description: HTTP status code
          example: 400
        code:
          type: string
          description: |
            Error code.

            All error codes start with "`E60`".
          example: E600101
        cause:
          type: string
          description: Human-readable explanation for the error
          example: The input data in question does not comply with validation rules
        action:
          type: string
          description: Human-readable description of the action that can be taken
            to correct the error
          example: Request a valid id
        correlationId:
          type: string
          description: Auto-generated id that univocally identifies the request
          example: 4199533b-6290-41db-8d79-edf4f4019a74
      required:
      - title
      - status
      - code
      - cause
      - action
      - correlationId
    FareReason:
      description: "Extensible enum: `ride` `parking` `...`  \nReason for the cost
        described in this `Fare` element.\n"
      type: string
      x-extensible-enum:
      - ride
      - parking
    FunctionalClass:
      description: |
        Functional class is used to classify roads depending on the speed, importance and
        connectivity of the road.

        * `1`: Roads allow for high volume, maximum speed traffic movement between and through major
          metropolitan areas.
        * `2`: Roads are used to channel traffic to functional class 1 roads for travel between and
          through cities in the shortest amount of time.
        * `3`: Roads that intersect functional class 2 roads and provide a high volume of traffic
          movement at a lower level of mobility than functional class 2 roads.
        * `4`: Roads that provide for a high volume of traffic movement at moderate speeds between
          neighbourhoods.
        * `5`: Roads with volume and traffic movement below the level of any other functional class.
      type: integer
      format: int32
      minimum: 1
      maximum: 5
    HazardousGoodsRestriction:
      description: "Extensible enum: `explosive` `gas` `flammable` `combustible` `organic`
        `poison` `radioactive` `corrosive` `poisonousInhalation` `harmfulToWater`
        `other` `any` `...`  \nHazardous goods restriction applied during the trip.\n\n*
        `explosive`: Explosive material\n* `gas`: Gas\n* `flammable`: Flammable material\n*
        `combustible`: Combustible material\n* `organic`: Organic material\n* `poison`:
        Poison\n* `radioactive`: Radioactive material\n* `corrosive`: Corrosive material\n*
        `poisonousInhalation`: Materials that are poisonous upon inhalation\n* `harmfulToWater`:
        Materials that are harmful to water\n* `other`: Other types of hazardous materials\n*
        `any`: Any of the above types\n"
      type: string
      x-extensible-enum:
      - explosive
      - gas
      - flammable
      - combustible
      - organic
      - poison
      - radioactive
      - corrosive
      - poisonousInhalation
      - harmfulToWater
      - other
      - any
    LocalizedString:
      description: String with optional language code.
      properties:
        value:
          description: String written in the language specified in the language property.
          type: string
        language:
          description: Language in BCP47 format
          type: string
      required:
      - value
      example:
        value: InvalidenstraÃe
        language: de
    Location:
      description: Location on the Earth
      properties:
        lat:
          description: Location of a point on the Earth north or south of the equator
            in decimal degrees.
          type: number
          format: double
          example: 52.531677
        lng:
          description: Location of a place on the Earth east or west of the prime
            meridian in decimal degrees.
          type: number
          format: double
          example: 13.381777
        elv:
          description: |
            Ellipsoid(geodetic) height in meters. Difference between the WGS84 ellipsoid and a point on the Earthâs surface.
            Note: Similar elevation can be obtained from a GPS receiver.
          type: number
          example: 512.5
      example:
        lat: 52.531677
        lng: 13.381777
      required:
      - lat
      - lng
    LocationString:
      type: string
      example: 52.5251,13.3694
    MaxSpeed:
      description: Speed in meters per second, or "unlimited" indicating that the
        speed is unlimited, e.g., on a German autobahn
      oneOf:
      - type: number
        minimum: 0
      - type: string
        enum:
        - unlimited
    NoticeSeverity:
      description: |
        Describes the impact a notice has on the resource to which the notice is attached.
        * critical - The notice must not be ignored, even if the type of notice is not known to the user. Any associated resource (e.g., route section) must not be used without further evaluation.
        * info - The notice is for informative purposes, but does not affect usability of the route.
      type: string
      enum:
      - critical
      - info
    ParkingLotPlaceType:
      description: "Extensible enum: `parkAndRide` `...`  \nCurrently possible values
        are:\n\n* `parkAndRide` - this parking lot is of type \"Park and Ride\",\n
        \ such as it is a parking specifically designed to allow transition between
        car and transit.\n"
      type: string
      x-extensible-enum:
      - parkAndRide
    PartialTime:
      type: string
      description: "**RFC 3339**, section 5.6 as defined by `partial-time`."
      pattern: "^[012]\\d:[0-5]\\d:[0-6]\\d(\\.\\d+)?$"
      example: 30600
    PaymentMethod:
      description: "Extensible enum: `cash` `bankCard` `creditCard` `passSubscription`
        `transponder` `videoToll` `cashExact` `travelCard` `...`  \nRecognized methods
        of payment.\n"
      type: string
      x-extensible-enum:
      - cash
      - bankCard
      - creditCard
      - passSubscription
      - transponder
      - videoToll
      - cashExact
      - travelCard
    PedestrianSpeed:
      description: Pedestrian speed in meters per second
      type: number
      minimum: 0.5
      maximum: 2
      default: 1
    Polyline:
      type: string
      description: Line string in [Flexible Polyline](https://github.com/heremaps/flexible-polyline)
        format.
      example: A05xgKuy2xCx9B7vUl0OhnR54EqSzpEl-HxjD3pBiGnyGi2CvwFsgD3nD4vB6e
    RoadInfoType:
      description: Type of the road (rural, urban, highway)
      type: string
      enum:
      - rural
      - urban
      - highway
      default: urban
    RoutingZone:
      description: Information about a routing zone.
      properties:
        ref:
          description: |
            A reference to a routing zone in HMC.

            The standard representation of a routing zone reference has the following structure:
            `{catalogHrn}:{catalogVersion}:({layerId})?:{tileId}:{zoneId}`

            The individual parts are:
            * `catalogHrn`: The HERE Resource Name that identifies the source catalog of the routing zone, example: `hrn:here:data::olp-here:rib-2`
            * `catalogVersion`: The catalog version
            * `layerId` (optional): The layer inside the catalog where the routing zone is located, example: `environmental-zones`
            * `tileId`: The HERE tile key of the partition/tile where the routing zone is located in the given version of the catalog
            * `zoneId`: The identifier of the referenced routing zone within the catalog, example: `here:cm:envzone:3455277`

            Example of a reference to an environmental zone in standard form:
            `hrn:here:data::olp-here:rib-2:1557:environmental-zones:all:here:cm:envzone:3455277`

            In order to reduce reponse size, routing zone references can also be provided in a compact representation.
            In compact form, parts of a reference are replaced by placeholders, which can be resolved using the `refReplacements` dictionary in the parent section.
            The placeholder format is `\$\d+` and needs to be surrounded by columns or string start/end. It can be captured with the following regular expression: `(^|:)\$\d+(:|$)`

            Example of the aforementioned environmental zone reference in compact form: `$0:$1:3455277`
            With the corresponding `refReplacements`:
            ```
            "refReplacements": {
              "0": "hrn:here:data::olp-here:rib-2:1557",
              "1": "environmental-zones:all:here:cm:envzone"
            }
            ```
          type: string
        type:
          description: "Extensible enum: `environmental` `vignette` `...`  \nThe type
            of a routing zone.\n"
          type: string
          x-extensible-enum:
          - environmental
          - vignette
        name:
          description: The routing zone's name.
          type: string
    Speed:
      description: Speed in meters per second
      type: number
      minimum: 0
    StreetAttributes:
      description: "Extensible enum: `rightDrivingSide` `dirtRoad` `tunnel` `bridge`
        `ramp` `controlledAccess` `roundabout` `underConstruction` `dividedRoad` `privateRoad`
        `...`  \n`StreetAttributes` is applied to a span of a route section and describes
        attribute flags of a street.\n* `rightDrivingSide`: Do vehicles have to drive
        on the right-hand side of the road or the left-hand side.\n* `dirtRoad`: This
        part of the route has an un-paved surface.\n* `tunnel`: This part of the route
        is a tunnel.\n* `bridge`: This part of the route is a bridge.\n* `ramp`: This
        part of the route is a ramp (usually connecting to/from/between highways).\n*
        `motorway`: This part of the route is a controlled access road (usually highways
        with motorway sign).\n* `roundabout`: This part of the route is a roundabout.\n*
        `underConstruction`: This part of the route is under construction.\n* `dividedRoad`:
        This part of the route uses a road with a physical or legal divider in the
        middle.\n* `privateRoad`: This part of the route uses a privately owned road.\n*
        `controlledAccessHighway`: This part of the route is a either controlled access
        or limited access road or both.\n\nAs it is possible that new street attributes
        are supported in the future, unknown street attributes should be ignored.\n"
      type: string
      x-extensible-enum:
      - rightDrivingSide
      - dirtRoad
      - tunnel
      - bridge
      - ramp
      - controlledAccess
      - roundabout
      - underConstruction
      - dividedRoad
      - privateRoad
    Time:
      type: string
      description: "**RFC 3339**, section 5.6 as defined by either `date-time` or
        `date-only` 'T' `partial-time` (ie no time-offset)."
      format: date-time
    TimeRestrictedWeekdays:
      type: string
      enum:
      - mo
      - tu
      - we
      - th
      - fr
      - sa
      - su
    TollSystem:
      description: 'Information about a toll system collecting payments on the route.

'
      properties:
        name:
          description: 'Name of this toll system

'
          type: string
        ref:
          description: 'Internal identification of this toll system. Will be replaced
            in the future by an hrn identifier.

'
          type: string
    TrafficIncidentCriticality:
      description: |
        Describes the impact an incident has on the route.
        * critical - The part of the route the incident affects is not usable.
        * major - Major impact on duration, e.g. stop and go
        * minor - Minor impact on duration, e.g. traffic jam
        * low - Very little impact on duration, e.g. slightly increased traffic
      type: string
      enum:
      - critical
      - major
      - minor
      - low
    TrafficIncidentType:
      description: "Extensible enum: `accident` `congestion` `construction` `disabledVehicle`
        `massTransit` `plannedEvent` `roadHazard` `roadClosure` `weather` `laneRestriction`
        `other` `...`  \nAn open list of possible incident causes / types.\nNote:
        Since new types are expected to appear, it is important to check for unknown
        types when parsing this value.\n"
      type: string
      x-extensible-enum:
      - accident
      - congestion
      - construction
      - disabledVehicle
      - massTransit
      - plannedEvent
      - roadHazard
      - roadClosure
      - weather
      - laneRestriction
      - other
    TrailerCountRange:
      description: Constrains the restriction to vehicles with number of trailers
        within specified range.
      properties:
        from:
          description: Inclusive minimum of trailer count.
          type: integer
          format: int32
          minimum: 0
        to:
          description: Inclusive maximum of trailer count. If not set, maximum trailer
            count is unbounded.
          type: integer
          format: int32
          minimum: 0
    TransitIncidentEffect:
      description: "Extensible enum: `cancelledService` `reducedService` `additionalService`
        `modifiedService` `delays` `detour` `stopMoved` `other` `...`  \nAn open list
        of possible incident effects.\nNote: Since new types are expected to appear,
        it is important to check for unknown types when parsing this value.\n"
      type: string
      x-extensible-enum:
      - cancelledService
      - reducedService
      - additionalService
      - modifiedService
      - delays
      - detour
      - stopMoved
      - other
    TransitIncidentType:
      description: "Extensible enum: `technicalProblem` `strike` `demonstration` `accident`
        `holiday` `weather` `maintenance` `construction` `policeActivity` `medicalEmergency`
        `other` `...`  \nAn open list of possible incident causes / types.\nNote:
        Since new types are expected to appear, it is important to check for unknown
        types when parsing this value.\n"
      type: string
      x-extensible-enum:
      - technicalProblem
      - strike
      - demonstration
      - accident
      - holiday
      - weather
      - maintenance
      - construction
      - policeActivity
      - medicalEmergency
      - other
    TransitModeFlags:
      title: Modes and excluded modes
      description: "Extensible enum: `highSpeedTrain` `intercityTrain` `interRegionalTrain`
        `regionalTrain` `cityTrain` `bus` `ferry` `subway` `lightRail` `privateBus`
        `inclined` `aerial` `busRapid` `monorail` `flight` `spaceship` `-highSpeedTrain`
        `-intercityTrain` `-interRegionalTrain` `-regionalTrain` `-cityTrain` `-bus`
        `-ferry` `-subway` `-lightRail` `-privateBus` `-inclined` `-aerial` `-busRapid`
        `-monorail` `-flight` `-spaceship` `...`  \nTransit mode and excluded modes
        of transport\n"
      type: string
      x-extensible-enum:
      - highSpeedTrain
      - intercityTrain
      - interRegionalTrain
      - regionalTrain
      - cityTrain
      - bus
      - ferry
      - subway
      - lightRail
      - privateBus
      - inclined
      - aerial
      - busRapid
      - monorail
      - flight
      - spaceship
      - "-highSpeedTrain"
      - "-intercityTrain"
      - "-interRegionalTrain"
      - "-regionalTrain"
      - "-cityTrain"
      - "-bus"
      - "-ferry"
      - "-subway"
      - "-lightRail"
      - "-privateBus"
      - "-inclined"
      - "-aerial"
      - "-busRapid"
      - "-monorail"
      - "-flight"
      - "-spaceship"
    TransitStopAttributes:
      description: "Extensible enum: `noEntry` `noExit` `...`  \nAttributes of a stop.\n\n*
        `noEntry`: The transport cannot be entered at the stop.\n* `noExit`: The transport
        cannot be exited at the stop.\n"
      type: string
      x-extensible-enum:
      - noEntry
      - noExit
    TruckAxleCountRange:
      description: Constrains the restriction to trucks with number of axles within
        specified range.
      properties:
        from:
          description: Inclusive minimum of axle count.
          type: integer
          format: int32
          minimum: 2
        to:
          description: Inclusive maximum of axle count. If not set, maximum axle count
            is unbounded.
          type: integer
          format: int32
          minimum: 2
    TruckType:
      description: |
        Specifies the type of truck

        * `straight`: a truck on a single frame with a permanently attached cargo area
        * `tractor`: a towing vehicle that can pull one or more semi-trailers (aka semi-truck)
      deprecated: true
      type: string
      enum:
      - straight
      - tractor
    TunnelCategory:
      description: |
        Specifies the tunnel category used to restrict transport of specific goods.

        **Limitations:** only valid for `transportMode=truck`.
      type: string
      enum:
      - B
      - C
      - D
      - E
    TurnActionDirection:
      description: Direction of the turn. `middle` is only used by the `keep` action.
      type: string
      enum:
      - middle
      - right
      - left
    TurnActionSeverity:
      description: |
        Tightness of the turn. Optional in the `turn` action, unused by other actions.

        * `light`: indicates making a light turn
        * `quite`: indicates making a regular turn
        * `heavy`: indicates making a heavy turn
      type: string
      enum:
      - light
      - quite
      - heavy
    Units:
      description: Units of measurement used, for example, in guidance instructions.
        The default is `metric`.
      type: string
      enum:
      - metric
      - imperial
    Uri:
      description: An URL address that links to a particular resource.
      type: string
      format: uri
    VehicleType:
      description: |
        Specifies the type of the vehicle

        * `straightTruck`: a truck on a single frame with a permanently attached cargo area. **Note:**
        default value when truck routing mode is used. **Limitations:** only valid for `transportMode=truck`.
        * `tractor`: a towing vehicle that can pull one or more semi-trailers (aka semi-truck).
        **Limitations:** only valid for `transportMode=truck`.
      type: string
      enum:
      - straightTruck
      - tractor
    WalkAttributes:
      description: "Extensible enum: `stairs` `park` `indoor` `open` `noThrough` `tollRoad`
        `...`  \nWalkAttributes are applied to a span of a route section and describe
        walk-related attribute\nflags.\n\n* `stairs`: This part of the route is using
        stairs.\n* `park`: This part of the route is located inside a park.\n* `indoor`:
        This part of the route is located inside a venue.\n* `open`: This part of
        the route is open to walking.\n* `noThrough`: This part of the route can only
        be traversed if origin, destination or any via waypoint is located there.\n*
        `tollRoad`: This part of the route is restricted with a fee (or toll).\n"
      type: string
      x-extensible-enum:
      - stairs
      - park
      - indoor
      - open
      - noThrough
      - tollRoad
    WheelchairAccessibility:
      description: |
        Defines accessibility for people with a disability and who use a wheelchair.

        * `unknown` - Information is not available.
        * `yes` - Full unrestricted accessibility.
        * `limited` - Accessibility is limited, not everywhere or require assistance.
        * `no` - No accessibility.
      type: string
      enum:
      - unknown
      - 'yes'
      - limited
      - 'no'
      default: unknown
    Agency:
      description: Contains information about a particular agency.
      properties:
        id:
          description: Unique code of the agency. Specifies if the same agency is
            used on different sections of the same route.
          type: string
        name:
          description: Human readable name of the owner of the transport service.
          type: string
        website:
          description: Link to the agency's website.
          allOf:
          - "$ref": "#/components/schemas/Uri"
      required:
      - id
      - name
    BaseAction:
      description: An action to be performed between sections or during a section.
      properties:
        action:
          description: |
            The type of the action.

            **NOTE:** The list of possible actions may be extended in the future. The client application should handle such a case gracefully.
          type: string
        duration:
          description: Estimated duration of this action (in seconds). Actions last
            until the next action, or the end of the route in case of the last one.
          allOf:
          - "$ref": "#/components/schemas/Duration"
        instruction:
          description: Description of the action (e.g. Turn left onto Minna St.).
          type: string
      required:
      - action
      - duration
    BasePlace:
      properties:
        name:
          description: Location name
          type: string
        waypoint:
          description: If present, this place corresponds to the waypoint in the request
            with the same index.
          type: integer
        type:
          description: |
            Place type. Each place type can have extra attributes.

            **NOTE:** The list of possible place types could be extended in the future.
            The client application is expected to handle such a case gracefully.
          type: string
        location:
          description: |
            The position of this location

            This position was used in route calculation. It may be different to the original position provided in the request.
          allOf:
          - "$ref": "#/components/schemas/Location"
        originalLocation:
          description: If present, the original position of this location provided
            in the request.
          allOf:
          - "$ref": "#/components/schemas/Location"
      required:
      - type
      - location
    BaseSummary:
      description: Total value of key attributes for a route section.
      properties:
        duration:
          "$ref": "#/components/schemas/Duration"
        length:
          "$ref": "#/components/schemas/Distance"
      required:
      - duration
      - length
    ChargingConnectorAttributes:
      description: Details of the connector that is suggested to be used in the section's
        `postAction` for charging.
      properties:
        power:
          description: Power supplied by the suggested connector in kW.
          type: number
        current:
          description: Current of the suggested connector in Amperes.
          type: number
        voltage:
          description: Voltage of the suggested connector in Volts.
          type: number
        supplyType:
          description: 'Supply type of the suggested connector.

'
          allOf:
          - "$ref": "#/components/schemas/ChargingSupplyType"
        connectorType:
          description: Suggested connector for charging at this station
          allOf:
          - "$ref": "#/components/schemas/ChargingConnectorType"
      required:
      - power
      - supplyType
      - connectorType
    DynamicSpeedInfo:
      description: 'Describes dynamic speed information, such as traffic speed, estimated
        speed without traffic, and turn time.

'
      properties:
        trafficSpeed:
          description: 'Traffic-enabled speed, which is the estimated speed considering
            traffic-relevant constraints.

'
          allOf:
          - "$ref": "#/components/schemas/Speed"
        baseSpeed:
          description: Estimated speed without considering any traffic-related constraints.
          allOf:
          - "$ref": "#/components/schemas/Speed"
        turnTime:
          description: 'Turn time estimate considering traffic and transport mode
            needed for turning from this segment into the next.

'
          allOf:
          - "$ref": "#/components/schemas/Duration"
      required:
      - trafficSpeed
      - baseSpeed
      - turnTime
    EnableInRouteAll:
      description: Comma-separated list of route parts to enable for this mode family
      type: array
      items:
        type: string
        enum:
        - routeHead
        - routeTail
        - entireRoute
      default:
      - routeHead
      - routeTail
      - entireRoute
    EnableInRouteNone:
      description: Comma-separated list of route parts to enable for this mode family
      type: array
      items:
        type: string
        enum:
        - routeHead
        - routeTail
        - entireRoute
      default: []
    ExitInfo:
      description: Exit information attached to an offset action
      properties:
        number:
          description: Number of the exit (e.g. '18')
          type: array
          items:
            "$ref": "#/components/schemas/LocalizedString"
      example:
        exit:
          number:
          - value: '15'
            language: de
    HealthResponseFailSchema:
      description: Returns the health of the service
      properties:
        status:
          description: |
            Health status of the service:

            * `ok` - the service is operating normally
            * `fail` - the service is currently encountering a failure
          type: string
          enum:
          - fail
    HealthResponseOKSchema:
      description: Returns the health of the service
      properties:
        status:
          description: |
            Health status of the service:

            * `ok` - the service is operating normally
            * `fail` - the service is currently encountering a failure
          type: string
          enum:
          - ok
    Notice:
      description: A notice contains important notifications.
      properties:
        title:
          type: string
          description: Human-readable notice description.
          example: No route found
        code:
          type: string
          description: Notice code.
          example: noRouteFound
        severity:
          "$ref": "#/components/schemas/NoticeSeverity"
        details:
          type: array
          description: Additional details about the notice
          items:
            "$ref": "#/components/schemas/BaseNoticeDetail"
      required:
      - code
    PedestrianMode:
      description: "Extensible enum: `pedestrian` `...`  \nPedestrian mode of transport.\n\nSince
        the supported pedestrian modes may be extended in the future, the pedestrian
        mode should be hidden when an unknown mode is encountered.\n"
      type: string
      x-extensible-enum:
      - pedestrian
      default: pedestrian
    RentedMode:
      title: Modes
      description: "Extensible enum: `car` `bicycle` `...`  \nRented mode of transport\n"
      type: string
      x-extensible-enum:
      - car
      - bicycle
    RentedModeExcluded:
      title: Excluded modes
      description: "Extensible enum: `-car` `-bicycle` `...`  \nRented mode to be
        excluded from the route\n"
      type: string
      x-extensible-enum:
      - "-car"
      - "-bicycle"
    RoadInfo:
      description: Road information attached to an offset action
      properties:
        type:
          "$ref": "#/components/schemas/RoadInfoType"
        name:
          description: |
            Name of the road

            If the road has multiple names, each name will be a separate entry in the array.
            The road names can be in multiple languages. If a preferred language was provided,
            and names in that language are available, they will be prioritized in the array.
            Otherwise the default name of the street is prioritized.
          type: array
          items:
            "$ref": "#/components/schemas/LocalizedString"
        number:
          description: Route name or number (e.g. 'M25')
          type: array
          items:
            "$ref": "#/components/schemas/LocalizedString"
        toward:
          description: Names of destinations on sign which can be reached when going
            in that direction
          type: array
          items:
            "$ref": "#/components/schemas/LocalizedString"
      example:
        fennstrasse:
          type: street
          name:
          - value: FennstraÃe
            language: de
          number:
          - value: B96
            language: de
          toward:
          - value: Reinickendorf
            language: de
    TaxiMode:
      description: "Extensible enum: `car` `...`  \nTaxicab mode of transport\n"
      type: string
      x-extensible-enum:
      - car
    TaxiModeExcluded:
      description: "Extensible enum: `-car` `...`  \nTaxicab mode to be excluded from
        the route\n"
      type: string
      x-extensible-enum:
      - "-car"
    TollCollectionLocation:
      description: |
        Location of the physical toll structure used for the toll collection.
        Typically, this would be a toll booth, but it may also be a transponder reader or a number-plate camera.
        Tolls that are paid via a vignette, for example, do not have toll collection locations, and therefore this element
        would not be present at all.

        The value of this property is a `Location` specifying the coordinates of the payment location.
      properties:
        name:
          description: 'Descriptive name of the location.

'
          type: string
        location:
          "$ref": "#/components/schemas/Location"
      required:
      - location
    TrafficIncident:
      description: |
        An incident describes a temporary event on the road network.
        It typically refers to a real world incident (accident, road construction, weather condition, etc.)
        on a street or street segment
      properties:
        description:
          type: string
          description: A human readable description of the incident
          example: closed due to roadworks
        type:
          "$ref": "#/components/schemas/TrafficIncidentType"
        criticality:
          "$ref": "#/components/schemas/TrafficIncidentCriticality"
        validFrom:
          "$ref": "#/components/schemas/Time"
        validUntil:
          "$ref": "#/components/schemas/Time"
    TransitIncident:
      description: |
        An incident describes disruptions on the transit network.
        Disruptions scale from delays to service cancellations.
      properties:
        summary:
          type: string
          description: A human readable summary of the incident
          example: The subway is closed each night between 1 AM and 5 AM.
        description:
          type: string
          description: A human readable description of the incident
          example: The subway is closed each night between 1 AM and 5 AM while we
            clean our trains and stations. We are running extra bus service overnight.
        type:
          "$ref": "#/components/schemas/TransitIncidentType"
        effect:
          "$ref": "#/components/schemas/TransitIncidentEffect"
        validFrom:
          "$ref": "#/components/schemas/Time"
        validUntil:
          "$ref": "#/components/schemas/Time"
        url:
          description: Link to the original incident published at the agency website
          allOf:
          - "$ref": "#/components/schemas/Uri"
      required:
      - type
      - effect
    TransitModeOutput:
      title: Modes
      description: "Extensible enum: `highSpeedTrain` `intercityTrain` `interRegionalTrain`
        `regionalTrain` `cityTrain` `bus` `ferry` `subway` `lightRail` `privateBus`
        `inclined` `aerial` `busRapid` `monorail` `carShuttleTrain` `flight` `spaceship`
        `...`  \nTransit mode of transport in the route response\n"
      type: string
      x-extensible-enum:
      - highSpeedTrain
      - intercityTrain
      - interRegionalTrain
      - regionalTrain
      - cityTrain
      - bus
      - ferry
      - subway
      - lightRail
      - privateBus
      - inclined
      - aerial
      - busRapid
      - monorail
      - carShuttleTrain
      - flight
      - spaceship
    TransitModesFilter:
      description: 'Transit type filter used to determine which types of transit to
        include in the response. By default, all supported transit types are permitted.
        Mixing of inclusive and exclusive transit types is not allowed.

'
      type: array
      uniqueItems: true
      items:
        "$ref": "#/components/schemas/TransitModeFlags"
    VehicleMode:
      title: Modes
      description: "Extensible enum: `car` `bicycle` `...`  \nVehicle mode of transport\n"
      type: string
      x-extensible-enum:
      - car
      - bicycle
      default: car
    VehicleModeExcluded:
      title: Excluded modes
      description: "Extensible enum: `-car` `-bicycle` `...`  \nVehicle mode to be
        excluded from the route\n"
      type: string
      x-extensible-enum:
      - "-car"
      - "-bicycle"
    VehicleRestriction:
      description: |
        Contains details about violated restrictions.

        Certain properties represent conditions to be evaluated, e.g., according to vehicle properties.
        The restriction is violated if and only if all of the conditions present are met.
      properties:
        title:
          type: string
          description: Detail title
        cause:
          type: string
          description: Cause of the notice
        type:
          type: string
          description: |
            Detail type. Each type of detail might contain extra attributes.

            **NOTE:** The list of possible detail types may be extended in the future.
            The client application is expected to handle such a case gracefully.
        forbiddenHazardousGoods:
          description: |
            Hazardous goods restrictions applied during the trip.

            This condition is met when the vehicle's shippedHazardousGoods
            contains any of the items in this array.
          type: array
          items:
            "$ref": "#/components/schemas/HazardousGoodsRestriction"
        maxGrossWeight:
          description: |
            Contains max permitted gross weight, in kilograms.

            This condition is met when the vehicle's `grossWeight` exceeds this value.
          type: integer
          format: int32
          minimum: 0
        maxWeightPerAxle:
          description: |
            Contains max permitted weight per axle, in kilograms.

            This condition is met when the vehicle's `weightPerAxle` exceeds this value.
          type: integer
          format: int32
          minimum: 0
        maxHeight:
          description: |
            Contains max permitted height, in centimeters.

            This condition is met when the vehicle's `height` exceeds this value.
          type: integer
          format: int32
          minimum: 0
        maxWidth:
          description: |
            Contains max permitted width, in centimeters.

            This condition is met when the vehicle's `width` exceeds this value.
          type: integer
          format: int32
          minimum: 0
        maxLength:
          description: |
            Contains max permitted length, in centimeters.

            This condition is met when the vehicle's `length` exceeds this value.
          type: integer
          format: int32
          minimum: 0
        axleCount:
          description: |
            Constrains the restriction to trucks with number of axles within specified range.

            This condition is met when the vehicle's `axleCount` is within the range specified.
          allOf:
          - "$ref": "#/components/schemas/TruckAxleCountRange"
        tunnelCategory:
          description: |
            Specifies the tunnel category used to restrict transport of specific goods.

            This condition is met when the value exceeds the tunnel category specified
            by the vehicle's `tunnelCategory`
          allOf:
          - "$ref": "#/components/schemas/TunnelCategory"
        timeDependent:
          description: 'Indicates that restriction depends on time.

'
          type: boolean
        truckType:
          description: |
            Constrains the restriction to a specific type of vehicle.

            This condition is met if the `vehicle[type]` request parameter matches this value.
          deprecated: true
          allOf:
          - "$ref": "#/components/schemas/TruckType"
        vehicleType:
          description: |
            Constrains the restriction to a specific type of vehicle.

            This condition is met if the `vehicle[type]` request parameter matches this value.
          allOf:
          - "$ref": "#/components/schemas/VehicleType"
        trailerCount:
          description: |
            Constrains the restriction to trucks with number of axles within specified range.

            This condition is met when the vehicle's `trailerCount` is within the range specified.
          allOf:
          - "$ref": "#/components/schemas/TrailerCountRange"
      required:
      - type
      example:
        "$ref": "#/components/examples/restrictionExample"
    VersionResponse:
      description: Returns the versions of the service components.
      properties:
        apiVersion:
          type: string
          description: The current version of the API.
        serviceVersion:
          type: string
          description: The current version of the service.
        dataVersions:
          type: array
          items:
            "$ref": "#/components/schemas/DataVersion"
          description: Returns the versions of data sets used by the service.
      required:
      - apiVersion
    WebLink:
      description: The URL address to an external resource.
      properties:
        id:
          description: Unique identifier for the web link. It is used to deduplicate
            links defined in multiple sections.
          type: string
        href:
          "$ref": "#/components/schemas/Uri"
        text:
          description: Text describing the url address (e.g. The example website).
          type: string
        hrefText:
          description: 'The interactive (or clickable) portion of the text. If not
            present (default), the entire content of the text attribute will be considered.

'
          type: string
      required:
      - id
      - text
    AccessPointPlace:
      description: Access point to a venue/station
      properties:
        name:
          description: Location name
          type: string
        waypoint:
          description: If present, this place corresponds to the waypoint in the request
            with the same index.
          type: integer
        type:
          description: |
            Place type. Each place type can have extra attributes.

            **NOTE:** The list of possible place types could be extended in the future.
            The client application is expected to handle such a case gracefully.
          type: string
        location:
          description: |
            The position of this location

            This position was used in route calculation. It may be different to the original position provided in the request.
          allOf:
          - "$ref": "#/components/schemas/Location"
        originalLocation:
          description: If present, the original position of this location provided
            in the request.
          allOf:
          - "$ref": "#/components/schemas/Location"
        wheelchairAccessible:
          description: |
            Information about accessibility for people with a disability and who use a wheelchair.

            * `unknown` - Accessibility information is not available.
            * `yes` - Access point is wheelchair accessible.
            * `limited` - Accessibility is limited or assistance is required.
            * `no` - No accessible path from the access point to platforms.
          allOf:
          - "$ref": "#/components/schemas/WheelchairAccessibility"
      required:
      - type
      - location
    Attribution:
      description: The URL address to an external resource.
      properties:
        id:
          description: Unique identifier for the web link. It is used to deduplicate
            links defined in multiple sections.
          type: string
        href:
          "$ref": "#/components/schemas/Uri"
        text:
          description: Text describing the url address (e.g. The example website).
          type: string
        hrefText:
          description: 'The interactive (or clickable) portion of the text. If not
            present (default), the entire content of the text attribute will be considered.

'
          type: string
        type:
          "$ref": "#/components/schemas/AttributionLinkType"
      required:
      - id
      - text
    BoardAction:
      description: An action to board a ferry.
      allOf:
      - "$ref": "#/components/schemas/BaseAction"
    ChargingStationPlace:
      description: A charging station
      properties:
        name:
          description: Human readable name of this charging station
          type: string
        waypoint:
          description: If present, this place corresponds to the waypoint in the request
            with the same index.
          type: integer
        type:
          description: |
            Place type. Each place type can have extra attributes.

            **NOTE:** The list of possible place types could be extended in the future.
            The client application is expected to handle such a case gracefully.
          type: string
        location:
          description: |
            The position of this location

            This position was used in route calculation. It may be different to the original position provided in the request.
          allOf:
          - "$ref": "#/components/schemas/Location"
        originalLocation:
          description: If present, the original position of this location provided
            in the request.
          allOf:
          - "$ref": "#/components/schemas/Location"
        id:
          description: Identifier of this charging station
          type: string
        connectorAttributes:
          "$ref": "#/components/schemas/ChargingConnectorAttributes"
        brand:
          "$ref": "#/components/schemas/ChargingStationBrand"
      required:
      - type
      - location
    DeboardAction:
      description: An action to disembark a ferry.
      allOf:
      - "$ref": "#/components/schemas/BaseAction"
    OffsetAction:
      description: |
        An action to be performed at or during a specific portion of a section.

        * `depart`: departure maneuver, such as "Start at"
        * `arrive`: arrival maneuver, such as "Arrive at"
        * `continue`: continue maneuver, such as "Continue on"
      properties:
        action:
          description: |
            The type of the action.

            **NOTE:** The list of possible actions may be extended in the future. The client application should handle such a case gracefully.
          type: string
        duration:
          description: Estimated duration of this action (in seconds). Actions last
            until the next action, or the end of the route in case of the last one.
          allOf:
          - "$ref": "#/components/schemas/Duration"
        instruction:
          description: Description of the action (e.g. Turn left onto Minna St.).
          type: string
        offset:
          description: Offset of a coordinate in the section's polyline.
          type: integer
        length:
          description: Estimated length of this action (in meters). Actions extend
            until the next action, or the end of the route in case of the last one.
          allOf:
          - "$ref": "#/components/schemas/Distance"
        currentRoad:
          description: Attributes of the current road
          allOf:
          - "$ref": "#/components/schemas/RoadInfo"
        nextRoad:
          description: Attributes of the next road
          allOf:
          - "$ref": "#/components/schemas/RoadInfo"
        exitSign:
          description: Attributes of the road exit
          allOf:
          - "$ref": "#/components/schemas/ExitInfo"
      required:
      - action
      - duration
    PedestrianNotice:
      description: A notice contains important notifications.
      properties:
        title:
          type: string
          description: Human-readable notice description.
          example: Violated avoid tunnel
        code:
          type: string
          description: "Extensible enum: `simplePolyline` `pedestrianOptionViolated`
            `violatedAvoidTunnel` `violatedAvoidDirtRoad` `...`  \nCurrently known
            codes (non-exhaustive: this list could be extended for new situations):\n\n|
            Code      | Description  | Severity |\n| --------- | ------- | ----            |\n| simplePolyline | An accurate polyline is not available for this section.
            The returned polyline has been generated from departure and arrival places
            | info |\n| pedestrianOptionViolated | This section violates the parameter
            `pedestrian[speed]` or `pedestrian[maxDistance]` | critical |\n| violatedAvoidTunnel
            | Route did not manage to avoid user preference | critical |\n| violatedAvoidDirtRoad
            | Route did not manage to avoid user preference | critical |\n"
          example: violatedAvoidTunnel
          x-extensible-enum:
          - simplePolyline
          - pedestrianOptionViolated
          - violatedAvoidTunnel
          - violatedAvoidDirtRoad
        severity:
          "$ref": "#/components/schemas/NoticeSeverity"
        details:
          type: array
          description: Additional details about the notice
          items:
            "$ref": "#/components/schemas/BaseNoticeDetail"
      required:
      - code
    PedestrianSpan:
      description: 'Span attached to a `Section` describing pedestrian content.

'
      properties:
        offset:
          description: 'Offset of a coordinate in the section''s polyline.

'
          type: integer
          format: int32
          minimum: 0
        length:
          description: 'Length of the span.

'
          "$ref": "#/components/schemas/Distance"
        duration:
          description: Duration of the span.
          "$ref": "#/components/schemas/Duration"
        streetAttributes:
          description: |
            `StreetAttributes` is applied to a span of a route section and describes attribute flags of a street.
            * `rightDrivingSide`: Do vehicles have to drive on the right-hand side of the road or the left-hand side.
            * `dirtRoad`: This part of the route has an un-paved surface.
            * `tunnel`: This part of the route is a tunnel.
            * `bridge`: This part of the route is a bridge.
            * `ramp`: This part of the route is a ramp (usually connecting to/from/between highways).
            * `motorway`: This part of the route is a controlled access road (usually highways with motorway sign).
            * `roundabout`: This part of the route is a roundabout.
            * `underConstruction`: This part of the route is under construction.
            * `dividedRoad`: This part of the route uses a road with a physical or legal divider in the middle.
            * `privateRoad`: This part of the route uses a privately owned road.
            * `controlledAccessHighway`: This part of the route is a either controlled access or limited access road or both.

            As it is possible that new street attributes are supported in the future, unknown street attributes should be ignored.
          type: array
          items:
            "$ref": "#/components/schemas/StreetAttributes"
        walkAttributes:
          type: array
          description: |
            Accessibility and walk-related attribute flags.

            * `stairs`: This part of the route is a staircase.
            * `park`: This part of the route is in a park.
            * `indoor`: This part of the route is inside a venue.
            * `open`: This part of the route is open to walking.
            * `noThrough`: This part of the route can only be traversed if origin, destination or any via waypoint is located there.
            * `tollRoad`: Access to this part of the route is restricted with a fee (or toll).

            As it is possible that new attributes are supported in the future, unknown attributes should be ignored.
          items:
            "$ref": "#/components/schemas/WalkAttributes"
        carAttributes:
          description: |
            Car specific `AccessAttributes`.

            `AccessAttributes` is applied to a span of a route section and describes access flags of a street.
            * `open`:  A part of the route that is open to cars.
            * `noThrough`:  A part of the route that can only be traversed if origin, destination or any via waypoint is located there.
            * `tollRoad`: Access to this part of the route is restricted with a fee (or toll).

            As it is possible that new access attributes are supported in the future, unknown access attributes should be ignored.
          type: array
          items:
            "$ref": "#/components/schemas/AccessAttributes"
        truckAttributes:
          description: |
            Truck specific `AccessAttributes`.

            `AccessAttributes` is applied to a span of a route section and describes access flags of a street.
            * `open`: This part of the route is open to trucks.
            * `noThrough`: This part of the route can only be traversed if origin, destination or any via waypoint is located there.
            * `tollRoad`: This part of the route is restricted with a fee (or toll).

            As it is possible that new access attributes are supported in the future, unknown access attributes should be ignored.
          type: array
          items:
            "$ref": "#/components/schemas/AccessAttributes"
        scooterAttributes:
          description: |
            Scooter specific `AccessAttributes`.

            `AccessAttributes` is applied to a span of a route section and describes access flags of a street.
            * `open`: This part of the route is open to scooters.

            As it is possible that new access attributes are supported in the future, unknown access attributes should be ignored.
          type: array
          items:
            "$ref": "#/components/schemas/AccessAttributes"
        names:
          description: Designated name for the span (e.g. a street name or a transport
            name)
          type: array
          items:
            "$ref": "#/components/schemas/LocalizedString"
        routeNumbers:
          description: Designated route name or number of the span (e.g. 'M25')
          type: array
          items:
            "$ref": "#/components/schemas/LocalizedString"
        countryCode:
          "$ref": "#/components/schemas/CountryCode"
        functionalClass:
          "$ref": "#/components/schemas/FunctionalClass"
        speedLimit:
          description: "**NOTE:** Attribute speedLimit is deprecated. Please, use
            maxSpeed instead of it.\n"
          "$ref": "#/components/schemas/Speed"
        maxSpeed:
          "$ref": "#/components/schemas/MaxSpeed"
        dynamicSpeedInfo:
          "$ref": "#/components/schemas/DynamicSpeedInfo"
        segmentId:
          description: |
            **Disclaimer: This property is currently in beta release, and is therefore subject to breaking changes.**

            The directed topology segment id including prefix (e.g '+here:cm:segment:').

            The id consists of two parts.
            * The direction ('+' or '-')
            * followed by the topology segment id (a unique identifier within the HERE platform catalogs).

            The direction specifies whether the route is using the segment in its canonical direction ('+' aka traveling along the geometry's direction), or against it ('-' aka traveling against the geometry's direction).
          type: string
        segmentRef:
          description: |
            A reference to the HMC topology segment used in this span.

            The standard representation of a segment reference has the following structure:
            {catalogHrn}:{catalogVersion}:({layerId})?:{tileId}:{segmentId}(#{direction}({startOffset}..{endOffset})?)?

            The individual parts are:
            * catalogHrn: The HERE Resource Name that identifies the source catalog of the segment, example: hrn:here:data::olp-here:rib-2
            * catalogVersion: The catalog version
            * layerId (optional): The layer inside the catalog where the segment can be found, example: topology-geometry
            * tileId: The HERE tile key of the partition/tile where the segment is located in the given version of the catalog. This can be on a lower level than the actual segment is stored at (for example, the provided tile ID can be on level 14, despite topology-geometry partitions being tiled at level 12). The level of a HERE tile key is indicated by the position of the highest set bit in binary representation. Since the HERE tile key represents a morton code of the x and y portion of the Tile ID, the level 12 tile ID can be retrieved from the level 14 tile ID by removing the 4 least significant bits (or 2 bits per level) or 1 hexidecimal digit. For example, the level 14 tile 377894441 is included in the level 12 tile 23618402 (377894441<sub>10</sub> = 16863629<sub>16</sub> &rightarrow; 1686362<sub>16</sub> = 23618402<sub>10</sub>)
            * segmentId: The identifier of the referenced topology segment inside the catalog, example: here:cm:segment:84905195
            * direction (optional): Either '*' for undirected or bidirectional, '+' for positive direction, '-' for negative direction, or '?' for unknown direction (not used by the routing service)
            * startOffset/endOffset (optional): The start- and end offset are non-negative numbers between 0 and 1, representing the start and end of the referenced range using a proportion of the length of the segment. 0 represents the start and 1 the end of the segment, relative to the indicated direction (or positive direction in case of undirected segments). Example: 0.7..1

            Example of a segment reference in standard representation:
            hrn:here:data::olp-here:rib-2:1363::377894441:here:cm:segment:84905195#+0.7..1

            The segment references can also be provided in a compact representation, to reduce the response size. In the compact representation, some parts are replaced by placeholders, which can be resolved using the refReplacements dictionary in the parent section.
            The placeholder format is \$\d+ and need to be surrounded by columns or string start/end. It can be captured with the following regular expression: (^|:)\$\d+(:|$)

            Example of the segment reference previously mentioned in compact representation:
            $0:377894441:$1:84905195#+0.7..1
            With the corresponding refReplacements:
            "refReplacements": {
              "0": "hrn:here:data::olp-here:rib-2:1363:",
              "1": "here:cm:segment"
            }
          type: string
        baseDuration:
          description: |
            Duration of this span (in seconds) ignoring time-aware information.

            For pedestrian mode, the reported time is currently equal to that in `duration`.
          "$ref": "#/components/schemas/Duration"
        typicalDuration:
          description: |
            Duration of this span (in seconds) under typical traffic conditions.

            For pedestrian mode, the reported time is currently equal to that in `duration`.
          "$ref": "#/components/schemas/Duration"
        incidents:
          description: |
            A list of indices into the incident array of the parent section.
            References all incidents that apply to the span.
          type: array
          items:
            type: integer
    PedestrianSummary:
      description: Total value of key attributes for a route section.
      properties:
        duration:
          "$ref": "#/components/schemas/Duration"
        length:
          "$ref": "#/components/schemas/Distance"
        baseDuration:
          description: |
            Duration (in seconds) ignoring time-aware information.

            For pedestrian mode, the reported time is currently equal to that in `duration`.
          allOf:
          - "$ref": "#/components/schemas/Duration"
      required:
      - duration
      - length
    PedestrianTransport:
      description: Information about a transport
      properties:
        mode:
          "$ref": "#/components/schemas/PedestrianMode"
      required:
      - mode
    Place:
      description: A place represents a generic location relevant for the route.
      allOf:
      - "$ref": "#/components/schemas/BasePlace"
    RangePrice:
      properties:
        type:
          description: |
            Type of price represented by this object. The API customer is responsible for correctly visualizing
            the pricing model. As it is possible to extend the supported price types in the future,
            the price information should be hidden when an unknown type is encountered.

            Available price types are:

              * `value` - A single value.
              * `range` - A range value that includes a minimum and maximum price.
          type: string
        estimated:
          description: Attribute value is `true` if the fare price is estimated, `false`
            if it is an exact value.
          type: boolean
          default: false
        currency:
          description: Local currency of the price compliant to ISO 4217
          type: string
        unit:
          description: |
            When set, the price is paid for a specific duration.

            Examples:
              * `"unit": 3600` - price for one hour
              * `"unit": 28800` - price for 8 hours
              * `"unit": 86400` - price for one day
          allOf:
          - "$ref": "#/components/schemas/Duration"
        minimum:
          description: Minimum price
          type: number
        maximum:
          description: Maximum price
          type: number
      required:
      - type
      - currency
      - minimum
      - maximum
    RentedModesFilter:
      oneOf:
      - type: array
        uniqueItems: true
        description: Enables specified rented types and disable everything else
        items:
          "$ref": "#/components/schemas/RentedMode"
      - type: array
        uniqueItems: true
        description: Use to disable specified rented types and enabled everything
          else
        items:
          "$ref": "#/components/schemas/RentedModeExcluded"
    SinglePrice:
      properties:
        type:
          description: |
            Type of price represented by this object. The API customer is responsible for correctly visualizing
            the pricing model. As it is possible to extend the supported price types in the future,
            the price information should be hidden when an unknown type is encountered.

            Available price types are:

              * `value` - A single value.
              * `range` - A range value that includes a minimum and maximum price.
          type: string
        estimated:
          description: Attribute value is `true` if the fare price is estimated, `false`
            if it is an exact value.
          type: boolean
          default: false
        currency:
          description: Local currency of the price compliant to ISO 4217
          type: string
        unit:
          description: |
            When set, the price is paid for a specific duration.

            Examples:
              * `"unit": 3600` - price for one hour
              * `"unit": 28800` - price for 8 hours
              * `"unit": 86400` - price for one day
          allOf:
          - "$ref": "#/components/schemas/Duration"
        value:
          description: The price value
          type: number
      required:
      - type
      - currency
      - value
    StationPlace:
      description: A station
      properties:
        name:
          description: Location name
          type: string
        waypoint:
          description: If present, this place corresponds to the waypoint in the request
            with the same index.
          type: integer
        type:
          description: |
            Place type. Each place type can have extra attributes.

            **NOTE:** The list of possible place types could be extended in the future.
            The client application is expected to handle such a case gracefully.
          type: string
        location:
          description: |
            The position of this location

            This position was used in route calculation. It may be different to the original position provided in the request.
          allOf:
          - "$ref": "#/components/schemas/Location"
        originalLocation:
          description: If present, the original position of this location provided
            in the request.
          allOf:
          - "$ref": "#/components/schemas/Location"
        id:
          description: Identifier of this station
          type: string
        platform:
          description: Platform name or number for the departure.
          type: string
        code:
          description: Short text or a number that identifies the place for riders.
          type: string
        wheelchairAccessible:
          description: |
            Information about accessibility for people with a disability and who use a wheelchair.

            * `unknown` - Accessibility information is not available.
            * `yes` - There exists some accessible path from outside the station to the specific stop/platform.
            * `limited` - Accessibility is limited or assistance is required.
            * `no` - There exists no accessible path from outside the station to the specific stop/platform.
          allOf:
          - "$ref": "#/components/schemas/WheelchairAccessibility"
      required:
      - type
      - location
    TaxiModesFilter:
      oneOf:
      - type: array
        uniqueItems: true
        description: Enables specified vehicle types and disable everything else
        items:
          "$ref": "#/components/schemas/TaxiMode"
      - type: array
        uniqueItems: true
        description: Use to disable specified vehicle types and enabled everything
          else
        items:
          "$ref": "#/components/schemas/TaxiModeExcluded"
    TaxiTransport:
      description: Information about a transport
      properties:
        mode:
          "$ref": "#/components/schemas/TaxiMode"
        name:
          description: Vehicle name or mobility provider name
          type: string
          example: RadioTaxi
        category:
          description: Human readable transport category (e.g. BikeShare, CarShare,
            Taxi, ...)
          type: string
        color:
          description: Color of the transport polyline and background for the transport
            name.
          allOf:
          - "$ref": "#/components/schemas/Color"
        textColor:
          description: Color of the transport name.
          allOf:
          - "$ref": "#/components/schemas/Color"
        model:
          description: Vehicle model.
          type: string
        licensePlate:
          description: Vehicle license plate number.
          type: string
        seats:
          description: Number of free seats on the vehicle.
          type: integer
        engine:
          description: Vehicle engine type.
          type: string
          enum:
          - combustion
          - electric
      required:
      - mode
    TransitNotice:
      description: A notice contains important notifications.
      properties:
        title:
          type: string
          description: Human-readable notice description.
          example: No schedule
        code:
          type: string
          description: "Extensible enum: `noSchedule` `noIntermediate` `unwantedMode`
            `scheduledTimes` `simplePolyline` `violatedAvoidFerry` `violatedAvoidTrainFerry`
            `...`  \nCurrently known codes (non-exhaustive: this list could be extended
            for new situations):\n\n| Code      | Description  | Severity |\n| ------            | ------- | ------- |\n| noSchedule | A timetable schedule is not available
            for the transit line in this section, and only the run frequency is available.
            As a result, departure/arrival times are approximated | info |\n| noIntermediate
            | Information about intermediate stops is not available for this transit
            line | info |\n| unwantedMode | This section contains a transport mode
            that was explictly disabled. Mode filtering is not available in this area
            | info |\n| scheduledTimes | The times returned on this section are the
            scheduled times even though delay information are available | info |\n|
            simplePolyline | An accurate polyline is not available for this section.
            The returned polyline has been generated from departure and arrival places
            | info |\n| violatedAvoidFerry | Route did not manage to avoid user preference
            | critical |\n| violatedAvoidTrainFerry | Route did not manage to avoid
            user preference | critical |\n"
          example: noSchedule
          x-extensible-enum:
          - noSchedule
          - noIntermediate
          - unwantedMode
          - scheduledTimes
          - simplePolyline
          - violatedAvoidFerry
          - violatedAvoidTrainFerry
        severity:
          "$ref": "#/components/schemas/NoticeSeverity"
        details:
          type: array
          description: Additional details about the notice
          items:
            "$ref": "#/components/schemas/BaseNoticeDetail"
      required:
      - code
    TransitSpan:
      description: |
        Contains information attached to a contiguous part of a `Section`. The information may be
        attached along different dimensions of a section which are geometry (spatial), distance or
        time.

        A section, if it uses spans, has an optional attribute `spans` which is an array of
        extended `Span` types.

        The attributes of a span which should be returned in the response are
        configured by a request parameter.

        Use this type as a base for any span extension for sections that provide spans.
      properties:
        offset:
          description: 'Offset of a coordinate in the section''s polyline.

'
          type: integer
          format: int32
          minimum: 0
        length:
          description: 'Length of the span.

'
          "$ref": "#/components/schemas/Distance"
        duration:
          description: Duration of the span.
          "$ref": "#/components/schemas/Duration"
        countryCode:
          "$ref": "#/components/schemas/CountryCode"
        names:
          description: Designated name for the span (e.g. a street name or a transport
            name)
          type: array
          items:
            "$ref": "#/components/schemas/LocalizedString"
    TransitTransport:
      description: Transit transport information.
      properties:
        mode:
          "$ref": "#/components/schemas/TransitModeOutput"
        name:
          description: Transit line name
          type: string
          example: U2
        headsign:
          description: Transit line headsign
          type: string
        category:
          description: Human readable transport category (such as Bus, Gondola, Tram,
            Train, ...)
          type: string
        color:
          description: Color of the transport polyline and background for the transport
            name.
          allOf:
          - "$ref": "#/components/schemas/Color"
        textColor:
          description: Color of the transport name.
          allOf:
          - "$ref": "#/components/schemas/Color"
        shortName:
          description: Short name of a transit line.
          type: string
          example: U2
        longName:
          description: Long name of a transit line.
          type: string
          example: Pankow - Ruhleben
      required:
      - mode
    VehicleModesFilter:
      oneOf:
      - type: array
        uniqueItems: true
        description: Enables specified vehicle types and disable everything else
        items:
          "$ref": "#/components/schemas/VehicleMode"
      - type: array
        uniqueItems: true
        description: Use to disable specified vehicle types and enabled everything
          else
        items:
          "$ref": "#/components/schemas/VehicleModeExcluded"
    VehicleNoticeDetail:
      description: Details attached to notices in vehicle section.
      oneOf:
      - "$ref": "#/components/schemas/VehicleRestriction"
      discriminator:
        propertyName: type
        mapping:
          restriction: "#/components/schemas/VehicleRestriction"
    VehicleSpan:
      description: 'Span attached to a `Section` describing vehicle content.

'
      properties:
        offset:
          description: 'Offset of a coordinate in the section''s polyline.

'
          type: integer
          format: int32
          minimum: 0
        length:
          description: 'Length of the span.

'
          "$ref": "#/components/schemas/Distance"
        duration:
          description: Duration of the span.
          "$ref": "#/components/schemas/Duration"
        streetAttributes:
          description: |
            `StreetAttributes` is applied to a span of a route section and describes attribute flags of a street.
            * `rightDrivingSide`: Vehicles have to drive on the right-hand side of the road.
            * `dirtRoad`: This part of the route has an un-paved surface.
            * `tunnel`: This part of the route is a tunnel.
            * `bridge`: This part of the route is a bridge.
            * `ramp`: This part of the route is a ramp (usually connecting to/from/between highways).
            * `motorway`: This part of the route is a controlled access road (usually highways with motorway sign).
            * `roundabout`: This part of the route is a roundabout.
            * `underConstruction`: This part of the route is under construction.
            * `dividedRoad`: This part of the route uses a road with a physical or legal divider in the middle.
            * `privateRoad`: This part of the route uses a privately owned road.
            * `controlledAccessHighway`: This part of the route is a either controlled access or limited access road or both.

            As it is possible that new street attributes are supported in the future, unknown street attributes should be ignored.
          type: array
          items:
            "$ref": "#/components/schemas/StreetAttributes"
        walkAttributes:
          type: array
          description: |
            Accessibility and walk-related attribute flags.

            * `stairs`: This part of the route is a staircase.
            * `park`: This part of the route is in a park.
            * `indoor`: This part of the route is inside a venue.
            * `open`: This part of the route is open to walking.
            * `noThrough`: This part of the route can only be traversed if origin, destination or any via waypoint is located there.
            * `tollRoad`: Access to this part of the route is restricted with a fee (or toll).

            As it is possible that new attributes are supported in the future, unknown attributes should be ignored.
          items:
            "$ref": "#/components/schemas/WalkAttributes"
        carAttributes:
          description: |
            Car specific `AccessAttributes`.

            `AccessAttributes` is applied to a span of a route section and describes access flags of a street.
            * `open`: This part of the route is open to cars.
            * `noThrough`: This part of the route can only be traversed if origin, destination or any via waypoint is located there.
            * `tollRoad`: This part of the route is restricted with a fee (or toll).

            As it is possible that new access attributes are supported in the future, unknown access attributes should be ignored.
          type: array
          items:
            "$ref": "#/components/schemas/AccessAttributes"
        truckAttributes:
          description: |
            Truck specific `AccessAttributes`.

            `AccessAttributes` is applied to a span of a route section and describes access flags of a street.
            * `open`: This part of the route is open to trucks.
            * `noThrough`: This part of the route can only be traversed if origin, destination or any via waypoint is located there.
            * `tollRoad`: This part of the route is restricted with a fee (or toll).

            As it is possible that new access attributes are supported in the future, unknown access attributes should be ignored.
          type: array
          items:
            "$ref": "#/components/schemas/AccessAttributes"
        scooterAttributes:
          description: |
            Scooter specific `AccessAttributes`.

            `AccessAttributes` is applied to a span of a route section and describes access flags of a street.
            * `open`: This part of the route is open to scooters.

            As it is possible that new access attributes are supported in the future, unknown access attributes should be ignored.
          type: array
          items:
            "$ref": "#/components/schemas/AccessAttributes"
        tollSystems:
          description: |
            Specifies the toll systems of a toll (if any) applicable for this specific span.
            Since tolls are not static information, the tolls may or may not be applicable to the same span in different requests,
            depending on factors like transport mode, time of day, etc.

            The contents of the array are reference indexes into the `tollSystems` array in the enclosing section.
          type: array
          items:
            type: integer
        names:
          description: Designated name for the span (e.g. a street name or a transport
            name)
          type: array
          items:
            "$ref": "#/components/schemas/LocalizedString"
        routeNumbers:
          description: Designated route name or number of the span (e.g. 'M25')
          type: array
          items:
            "$ref": "#/components/schemas/LocalizedString"
        countryCode:
          "$ref": "#/components/schemas/CountryCode"
        functionalClass:
          "$ref": "#/components/schemas/FunctionalClass"
        speedLimit:
          description: "**NOTE:** Attribute speedLimit is deprecated. Please, use
            maxSpeed instead of it.\n"
          "$ref": "#/components/schemas/Speed"
        maxSpeed:
          "$ref": "#/components/schemas/MaxSpeed"
        dynamicSpeedInfo:
          "$ref": "#/components/schemas/DynamicSpeedInfo"
        segmentId:
          description: |
            **Disclaimer: This property is currently in beta release, and is therefore subject to breaking changes.**

            The directed topology segment id including prefix (e.g '+here:cm:segment:').

            The id consists of two parts.
            * The direction ('+' or '-')
            * followed by the topology segment id (a unique identifier within the HERE platform catalogs).

            The direction specifies whether the route is using the segment in its canonical direction ('+' aka traveling along the geometry's direction), or against it ('-' aka traveling against the geometry's direction).
          type: string
        segmentRef:
          description: |
            A reference to the HMC topology segment used in this span.

            The standard representation of a segment reference has the following structure:
            {catalogHrn}:{catalogVersion}:({layerId})?:{tileId}:{segmentId}(#{direction}({startOffset}..{endOffset})?)?

            The individual parts are:
            * catalogHrn: The HERE Resource Name that identifies the source catalog of the segment, example: hrn:here:data::olp-here:rib-2
            * catalogVersion: The catalog version
            * layerId (optional): The layer inside the catalog where the segment can be found, example: topology-geometry
            * tileId: The HERE tile key of the partition/tile where the segment is located in the given version of the catalog. This can be on a lower level than the actual segment is stored at (for example, the provided tile ID can be on level 14, despite topology-geometry partitions being tiled at level 12). The level of a HERE tile key is indicated by the position of the highest set bit in binary representation. Since the HERE tile key represents a morton code of the x and y portion of the Tile ID, the level 12 tile ID can be retrieved from the level 14 tile ID by removing the 4 least significant bits (or 2 bits per level) or 1 hexidecimal digit. For example, the level 14 tile 377894441 is included in the level 12 tile 23618402 (377894441<sub>10</sub> = 16863629<sub>16</sub> &rightarrow; 1686362<sub>16</sub> = 23618402<sub>10</sub>)
            * segmentId: The identifier of the referenced topology segment inside the catalog, example: here:cm:segment:84905195
            * direction (optional): Either '*' for undirected or bidirectional, '+' for positive direction, '-' for negative direction, or '?' for unknown direction (not used by the routing service)
            * startOffset/endOffset (optional): The start- and end offset are non-negative numbers between 0 and 1, representing the start and end of the referenced range using a proportion of the length of the segment. 0 represents the start and 1 the end of the segment, relative to the indicated direction (or positive direction in case of undirected segments). Example: 0.7..1

            Example of a segment reference in standard representation:
            hrn:here:data::olp-here:rib-2:1363::377894441:here:cm:segment:84905195#+0.7..1

            The segment references can also be provided in a compact representation, to reduce the response size. In the compact representation, some parts are replaced by placeholders, which can be resolved using the refReplacements dictionary in the parent section.
            The placeholder format is \$\d+ and need to be surrounded by columns or string start/end. It can be captured with the following regular expression: (^|:)\$\d+(:|$)

            Example of the segment reference previously mentioned in compact representation:
            $0:377894441:$1:84905195#+0.7..1
            With the corresponding refReplacements:
            "refReplacements": {
              "0": "hrn:here:data::olp-here:rib-2:1363:",
              "1": "here:cm:segment"
            }
          type: string
        consumption:
          description: Estimated net energy consumption along this span (in kWh).
          "$ref": "#/components/schemas/Energy"
        baseDuration:
          description: |
            Duration of this span (in seconds) ignoring time-aware information.

            In particular, dynamic traffic information is not taken into account. Only average
            free-flow speeds based on historical traffic are used to calculate this duration.

            The `baseDuration` can also be understood as the best possible duration.
          "$ref": "#/components/schemas/Duration"
        typicalDuration:
          description: |
            Duration of this span (in seconds) under typical traffic conditions.

            In particular, dynamic traffic information is not taken into account. Instead,
            speeds that are typical for the given time of day/day of week based on historical
            traffic are used to calculate this duration.
          "$ref": "#/components/schemas/Duration"
        incidents:
          description: |
            A list of indices into the incident array of the parent section.
            References all incidents that apply to the span.
            This requires `incidents` to be specified as part of the `return` parameter.
          type: array
          items:
            type: integer
        routingZones:
          description: |
            A list of indices into the routing zone array of the parent section.
            References all applicable routing zones to the span.
          type: array
          items:
            type: integer
        truckRoadTypes:
          description: A list of indices into the truck road types array of the parent
            section. References all applicable truck road types to the span.
          type: array
          items:
            type: integer
        notices:
          description: |
            A list of indices into the notices array of the parent section.
            References all notices that apply to the span.
          type: array
          items:
            type: integer
    VehicleSummary:
      description: Total value of key attributes for a route section.
      properties:
        duration:
          "$ref": "#/components/schemas/Duration"
        length:
          "$ref": "#/components/schemas/Distance"
        consumption:
          description: Estimated net energy consumption (in kWh) including charge
            at charging station if applicable.
          "$ref": "#/components/schemas/Energy"
        baseDuration:
          description: |
            Duration (in seconds) ignoring time-aware information.

            In particular, dynamic traffic information is not taken into account. Only average
            free-flow speeds based on historical traffic are used to calculate this duration.

            The `baseDuration` can also be understood as the best possible duration.
          allOf:
          - "$ref": "#/components/schemas/Duration"
        typicalDuration:
          description: |
            Duration (in seconds) under typical traffic conditions.

            In particular, dynamic traffic information is not taken into account. Instead,
            speeds that are typical for the given time of day/day of week based on historical
            traffic are used to calculate this duration.
          allOf:
          - "$ref": "#/components/schemas/Duration"
      required:
      - duration
      - length
    VehicleTransport:
      description: Information about a transport
      properties:
        mode:
          "$ref": "#/components/schemas/VehicleMode"
      required:
      - mode
    WebLinkWithDeviceType:
      description: The URL address to an external resource.
      properties:
        id:
          description: Unique identifier for the web link. It is used to deduplicate
            links defined in multiple sections.
          type: string
        href:
          "$ref": "#/components/schemas/Uri"
        text:
          description: Text describing the url address (e.g. The example website).
          type: string
        hrefText:
          description: 'The interactive (or clickable) portion of the text. If not
            present (default), the entire content of the text attribute will be considered.

'
          type: string
        deviceType:
          description: "Extensible enum: `web` `ios` `android` `...`  \nDevice type
            for which the link is intended\n"
          type: string
          x-extensible-enum:
          - web
          - ios
          - android
      required:
      - id
      - text
    ArriveAction:
      allOf:
      - "$ref": "#/components/schemas/OffsetAction"
    ContinueAction:
      description: |
        An action to be performed at or during a specific portion of a section.

        * `depart`: departure maneuver, such as "Start at"
        * `arrive`: arrival maneuver, such as "Arrive at"
        * `continue`: continue maneuver, such as "Continue on"
      properties:
        action:
          description: |
            The type of the action.

            **NOTE:** The list of possible actions may be extended in the future. The client application should handle such a case gracefully.
          type: string
        duration:
          description: Estimated duration of this action (in seconds). Actions last
            until the next action, or the end of the route in case of the last one.
          allOf:
          - "$ref": "#/components/schemas/Duration"
        instruction:
          description: Description of the action (e.g. Turn left onto Minna St.).
          type: string
        offset:
          description: Offset of a coordinate in the section's polyline.
          type: integer
        length:
          description: Estimated length of this action (in meters). Actions extend
            until the next action, or the end of the route in case of the last one.
          allOf:
          - "$ref": "#/components/schemas/Distance"
        currentRoad:
          description: Attributes of the current road
          allOf:
          - "$ref": "#/components/schemas/RoadInfo"
        nextRoad:
          description: Attributes of the next road
          allOf:
          - "$ref": "#/components/schemas/RoadInfo"
        exitSign:
          description: Attributes of the road exit
          allOf:
          - "$ref": "#/components/schemas/ExitInfo"
        intersectionName:
          description: Name of the intersection where the turn takes place, if available.
          type: array
          items:
            "$ref": "#/components/schemas/LocalizedString"
      required:
      - action
      - duration
    DepartAction:
      allOf:
      - "$ref": "#/components/schemas/OffsetAction"
    FarePrice:
      description: Price of a fare
      discriminator:
        propertyName: type
        mapping:
          value: "#/components/schemas/SinglePrice"
          range: "#/components/schemas/RangePrice"
      oneOf:
      - "$ref": "#/components/schemas/SinglePrice"
      - "$ref": "#/components/schemas/RangePrice"
    Passthrough:
      description: Describes a location and time the section is passing through.
      properties:
        place:
          "$ref": "#/components/schemas/Place"
        offset:
          description: Passthrough offsets are the coordinate index in the polyline.
          type: number
      required:
      - place
    PedestrianPostAction:
      oneOf:
      - "$ref": "#/components/schemas/OffsetAction"
      discriminator:
        propertyName: action
        mapping:
          wait: "#/components/schemas/OffsetAction"
    RentedPostAction:
      discriminator:
        propertyName: action
        mapping:
          park: "#/components/schemas/OffsetAction"
      oneOf:
      - "$ref": "#/components/schemas/OffsetAction"
    RentedPreAction:
      discriminator:
        propertyName: action
        mapping:
          setup: "#/components/schemas/OffsetAction"
      oneOf:
      - "$ref": "#/components/schemas/OffsetAction"
    TaxiPreAction:
      discriminator:
        propertyName: action
        mapping:
          wait: "#/components/schemas/OffsetAction"
      oneOf:
      - "$ref": "#/components/schemas/OffsetAction"
    TimeRestrictedPrice:
      properties:
        type:
          description: |
            Type of price represented by this object. The API customer is responsible for correctly visualizing
            the pricing model. As it is possible to extend the supported price types in the future,
            the price information should be hidden when an unknown type is encountered.

            Available price types are:

              * `restricted` - A single price value valid for a specific time or duration
          type: string
        estimated:
          description: Attribute value is `true` if the fare price is estimated, `false`
            if it is an exact value.
          type: boolean
          default: false
        currency:
          description: Local currency of the price compliant to ISO 4217
          type: string
        unit:
          description: |
            When set, the price is paid for a specific duration.

            Examples:
              * `"unit": 3600` - price for one hour
              * `"unit": 28800` - price for 8 hours
              * `"unit": 86400` - price for one day
          allOf:
          - "$ref": "#/components/schemas/Duration"
        value:
          description: The price value
          type: number
        days:
          description: This price applies only for the selected days
          type: array
          items:
            "$ref": "#/components/schemas/TimeRestrictedWeekdays"
          example:
          - sa
          - su
        minDuration:
          description: The price applies if the duration is more or equal to `minDuration`
          allOf:
          - "$ref": "#/components/schemas/Duration"
          example: 1801
        maxDuration:
          description: The price applies if the duration is less or equal to `maxDuration`
          allOf:
          - "$ref": "#/components/schemas/Duration"
          example: 3600
        fromTime:
          description: The price applies from this time of the day
          allOf:
          - "$ref": "#/components/schemas/PartialTime"
        toTime:
          description: The price applies until this time of the day
          allOf:
          - "$ref": "#/components/schemas/PartialTime"
      required:
      - type
      - currency
      - value
    TransitDeparture:
      description: Transit departure
      properties:
        time:
          description: Expected time of departure of the event. Format is **RFC 3339**,
            section 5.6 as defined by `date-time`.
          allOf:
          - "$ref": "#/components/schemas/Time"
        place:
          description: Departure/arrival location
          allOf:
          - "$ref": "#/components/schemas/StationPlace"
        delay:
          description: The accumulated delay in seconds from the scheduled time of
            the event.
          allOf:
          - "$ref": "#/components/schemas/DepartureDelay"
        status:
          "$ref": "#/components/schemas/DepartureStatus"
      required:
      - place
    TransitPostAction:
      oneOf:
      - "$ref": "#/components/schemas/DeboardAction"
      discriminator:
        propertyName: action
        mapping:
          deboard: "#/components/schemas/DeboardAction"
    TransitPreAction:
      description: An action that must be done prior to `departure`.
      discriminator:
        propertyName: action
        mapping:
          board: "#/components/schemas/BoardAction"
      oneOf:
      - "$ref": "#/components/schemas/BoardAction"
    TurnAction:
      description: |
        An action in which a direction change is made.

        * `ramp`: ramp maneuver, such as "Take the left ramp onto"
        * `roundaboutPass`: Going straight on a roundabout maneuver
        * `roundaboutEnter`: Arriving at a destination roundabout maneuver
        * `uTurn`: u-turn maneuver, such as "Make a right U-turn at"
        * `turn`: turn maneuver, such as "Make a sharp right turn at"
        * `keep`: a maneuver following a fork, such as "Take the middle fork onto"
        * `enterHighway`: a maneuver to enter a highway, used for turn-by-turn guidance only
      properties:
        action:
          description: |
            The type of the action.

            **NOTE:** The list of possible actions may be extended in the future. The client application should handle such a case gracefully.
          type: string
        duration:
          description: Estimated duration of this action (in seconds). Actions last
            until the next action, or the end of the route in case of the last one.
          allOf:
          - "$ref": "#/components/schemas/Duration"
        instruction:
          description: Description of the action (e.g. Turn left onto Minna St.).
          type: string
        offset:
          description: Offset of a coordinate in the section's polyline.
          type: integer
        length:
          description: Estimated length of this action (in meters). Actions extend
            until the next action, or the end of the route in case of the last one.
          allOf:
          - "$ref": "#/components/schemas/Distance"
        currentRoad:
          description: Attributes of the current road
          allOf:
          - "$ref": "#/components/schemas/RoadInfo"
        nextRoad:
          description: Attributes of the next road
          allOf:
          - "$ref": "#/components/schemas/RoadInfo"
        exitSign:
          description: Attributes of the road exit
          allOf:
          - "$ref": "#/components/schemas/ExitInfo"
        intersectionName:
          description: Name of the intersection where the turn takes place, if available.
          type: array
          items:
            "$ref": "#/components/schemas/LocalizedString"
        direction:
          "$ref": "#/components/schemas/TurnActionDirection"
        severity:
          "$ref": "#/components/schemas/TurnActionSeverity"
      required:
      - action
      - duration
    VehicleNotice:
      example:
        "$ref": "#/components/examples/noticeWithRestrictionsExample"
      description: A notice contains important notifications.
      properties:
        title:
          type: string
          description: Human-readable notice description.
          example: Violated avoid toll road
        code:
          type: string
          description: "Extensible enum: `violatedAvoidControlledAccessHighway` `violatedAvoidTollRoad`
            `violatedAvoidTunnel` `violatedAvoidDirtRoad` `violatedBlockedRoad` `violatedStartDirection`
            `violatedCarpool` `violatedTurnRestriction` `violatedVehicleRestriction`
            `violatedZoneRestriction` `violatedAvoidDifficultTurns` `violatedAvoidUTurns`
            `violatedEmergencyGate` `violatedAvoidSeasonalClosure` `violatedAvoidTollTransponder`
            `seasonalClosure` `tollTransponder` `mlDurationUnavailable` `simplePolyline`
            `tollsDataUnavailable` `chargingStopNotNeeded` `...`  \nCurrently known
            codes (non-exhaustive: this list could be extended for new situations):\n\n|
            Code      | Description  | Severity |\n| --------- | ------- | ----            |\n| violatedAvoidControlledAccessHighway | Route did not manage to avoid
            user preference | critical |\n| violatedAvoidTollRoad | Route did not
            manage to avoid user preference | critical |\n| violatedAvoidTunnel |
            Route did not manage to avoid user preference | critical |\n| violatedAvoidDirtRoad
            | Route did not manage to avoid user preference | critical |\n| violatedBlockedRoad
            | Route uses roads blocked by traffic events | critical |\n| violatedStartDirection
            | Start direction of the route is not as requested | critical |\n| violatedCarpool
            | Route did not manage to avoid user preference | critical |\n| violatedTurnRestriction
            | Route uses a time-restricted turn | critical |\n| violatedVehicleRestriction
            | Route uses a road which is forbidden for the given vehicle profile |
            critical |\n| violatedZoneRestriction | Route uses a road which is part
            of restricted routing zones | critical |\n| violatedAvoidDifficultTurns
            | Route did not manage to avoid user preference | critical |\n| violatedAvoidUTurns
            | Route did not manage to avoid user preference | critical |\n| violatedEmergencyGate
            | Route goes through an emergency gate | critical |\n| violatedAvoidSeasonalClosure
            | Route did not manage to avoid seasonal closure | critical |\n| violatedAvoidTollTransponder
            | Route did not manage to avoid toll booth that requires transponder |
            critical |\n| seasonalClosure | Route goes through seasonal closure |
            info |\n| tollTransponder | Route goes through toll booth that requires
            transponder | info |\n| mlDurationUnavailable | Machine learning duration
            was requested but is not available for this section | info |\n| simplePolyline
            | An accurate polyline is not available for this section. The returned
            polyline has been generated from departure and arrival places. | info
            |\n| tollsDataUnavailable | Tolls data was requested but could not be
            calculated for this section | info |\n| chargingStopNotNeeded | A charging
            stop was planned at the destination of this section, but it is no longer
            needed (getRoutesByHandle requests only) | info |\n"
          example: violatedAvoidTollRoad
          x-extensible-enum:
          - violatedAvoidControlledAccessHighway
          - violatedAvoidTollRoad
          - violatedAvoidTunnel
          - violatedAvoidDirtRoad
          - violatedBlockedRoad
          - violatedStartDirection
          - violatedCarpool
          - violatedTurnRestriction
          - violatedVehicleRestriction
          - violatedZoneRestriction
          - violatedAvoidDifficultTurns
          - violatedAvoidUTurns
          - violatedEmergencyGate
          - violatedAvoidSeasonalClosure
          - violatedAvoidTollTransponder
          - seasonalClosure
          - tollTransponder
          - mlDurationUnavailable
          - simplePolyline
          - tollsDataUnavailable
          - chargingStopNotNeeded
        severity:
          "$ref": "#/components/schemas/NoticeSeverity"
        details:
          type: array
          description: Additional details about the notice
          items:
            "$ref": "#/components/schemas/VehicleNoticeDetail"
      required:
      - code
    ExitAction:
      description: |
        An action to leave a roundabout or highway.

        * `exit`: exit maneuver, such as "Take the left exit to"
        * `roundaboutExit`: roundabout exit maneuver, such as "Take the third exit of the roundabout onto"
      properties:
        action:
          description: |
            The type of the action.

            **NOTE:** The list of possible actions may be extended in the future. The client application should handle such a case gracefully.
          type: string
        duration:
          description: Estimated duration of this action (in seconds). Actions last
            until the next action, or the end of the route in case of the last one.
          allOf:
          - "$ref": "#/components/schemas/Duration"
        instruction:
          description: Description of the action (e.g. Turn left onto Minna St.).
          type: string
        offset:
          description: Offset of a coordinate in the section's polyline.
          type: integer
        length:
          description: Estimated length of this action (in meters). Actions extend
            until the next action, or the end of the route in case of the last one.
          allOf:
          - "$ref": "#/components/schemas/Distance"
        currentRoad:
          description: Attributes of the current road
          allOf:
          - "$ref": "#/components/schemas/RoadInfo"
        nextRoad:
          description: Attributes of the next road
          allOf:
          - "$ref": "#/components/schemas/RoadInfo"
        exitSign:
          description: Attributes of the road exit
          allOf:
          - "$ref": "#/components/schemas/ExitInfo"
        intersectionName:
          description: Name of the intersection where the turn takes place, if available.
          type: array
          items:
            "$ref": "#/components/schemas/LocalizedString"
        direction:
          "$ref": "#/components/schemas/TurnActionDirection"
        severity:
          "$ref": "#/components/schemas/TurnActionSeverity"
        exit:
          description: Which exit to take next.
          type: integer
          minimum: 1
          maximum: 12
          default: 1
      required:
      - action
      - duration
    Fare:
      description: "`Fare` type contains information about a single fare or ticket
        needed for this section of the route."
      properties:
        id:
          description: Unique Fare id. Used to deduplicate fares that apply to multiple
            sections
          type: string
        name:
          description: Name of a fare
          type: string
        price:
          "$ref": "#/components/schemas/FarePrice"
        convertedPrice:
          "$ref": "#/components/schemas/FarePrice"
        reason:
          "$ref": "#/components/schemas/FareReason"
          default: ride
        paymentMethods:
          description: 'Specifies the payment methods for which this fare is valid.

'
          type: array
          items:
            "$ref": "#/components/schemas/PaymentMethod"
          minItems: 1
          uniqueItems: true
      required:
      - id
      - name
      - price
    KeepAction:
      allOf:
      - "$ref": "#/components/schemas/TurnAction"
    ParkingLotPlace:
      description: A parking lot
      properties:
        name:
          description: Location name
          type: string
        waypoint:
          description: If present, this place corresponds to the waypoint in the request
            with the same index.
          type: integer
        type:
          description: |
            Place type. Each place type can have extra attributes.

            **NOTE:** The list of possible place types could be extended in the future.
            The client application is expected to handle such a case gracefully.
          type: string
        location:
          description: |
            The position of this location

            This position was used in route calculation. It may be different to the original position provided in the request.
          allOf:
          - "$ref": "#/components/schemas/Location"
        originalLocation:
          description: If present, the original position of this location provided
            in the request.
          allOf:
          - "$ref": "#/components/schemas/Location"
        id:
          description: Identifier of this parking lot
          type: string
        attributes:
          type: array
          description: Attributes of a parking lot.
          items:
            "$ref": "#/components/schemas/ParkingLotPlaceType"
        rates:
          description: 'List of possible parking rates for this facility. Different
            rates can apply depending on the day, time of the day or parking duration.

'
          type: array
          items:
            "$ref": "#/components/schemas/TimeRestrictedPrice"
      required:
      - type
      - location
    RampAction:
      allOf:
      - "$ref": "#/components/schemas/TurnAction"
    RoundaboutEnterAction:
      allOf:
      - "$ref": "#/components/schemas/TurnAction"
    RoundaboutPassAction:
      allOf:
      - "$ref": "#/components/schemas/TurnAction"
    TollCountrySummary:
      properties:
        countryCode:
          "$ref": "#/components/schemas/CountryCode"
        price:
          "$ref": "#/components/schemas/FarePrice"
    TollSystemSummary:
      properties:
        tollSystem:
          description: 'Reference index into the `tollSystems` array of the containing
            section.

'
          type: integer
        price:
          "$ref": "#/components/schemas/FarePrice"
    TransitStop:
      description: A transit stop of the route
      properties:
        departure:
          "$ref": "#/components/schemas/TransitDeparture"
        duration:
          description: Stop duration. If not set the vehicle departs as soon as people
            are on board.
          type: integer
          default: 0
        attributes:
          description: "**NOTE:** As it is possible that new attributes are supported
            in the future, unknown attributes should be ignored.\n"
          type: array
          items:
            "$ref": "#/components/schemas/TransitStopAttributes"
      required:
      - departure
    UTurnAction:
      allOf:
      - "$ref": "#/components/schemas/TurnAction"
    PedestrianPlace:
      description: Place used in pedestrian routing
      oneOf:
      - "$ref": "#/components/schemas/Place"
      - "$ref": "#/components/schemas/StationPlace"
      - "$ref": "#/components/schemas/AccessPointPlace"
      - "$ref": "#/components/schemas/ParkingLotPlace"
      - "$ref": "#/components/schemas/ChargingStationPlace"
      discriminator:
        propertyName: type
        mapping:
          place: "#/components/schemas/Place"
          station: "#/components/schemas/StationPlace"
          accessPoint: "#/components/schemas/AccessPointPlace"
          parkingLot: "#/components/schemas/ParkingLotPlace"
          chargingStation: "#/components/schemas/ChargingStationPlace"
    RentedTransport:
      description: Information about a transport
      properties:
        mode:
          "$ref": "#/components/schemas/VehicleMode"
        name:
          description: Vehicle name or mobility provider name
          type: string
          example: RadioTaxi
        category:
          description: Human readable transport category (e.g. BikeShare, CarShare,
            Taxi, ...)
          type: string
        color:
          description: Color of the transport polyline and background for the transport
            name.
          allOf:
          - "$ref": "#/components/schemas/Color"
        textColor:
          description: Color of the transport name.
          allOf:
          - "$ref": "#/components/schemas/Color"
        model:
          description: Vehicle model.
          type: string
        licensePlate:
          description: Vehicle license plate number.
          type: string
        seats:
          description: Number of free seats on the vehicle.
          type: integer
        engine:
          description: Vehicle engine type.
          type: string
          enum:
          - combustion
          - electric
        fares:
          description: List of fares/tickets to be paid for this section of the route
          type: array
          items:
            "$ref": "#/components/schemas/Fare"
        interior:
          type: integer
        exterior:
          type: integer
        fuel:
          type: integer
      required:
      - mode
    RoundaboutExitAction:
      allOf:
      - "$ref": "#/components/schemas/ExitAction"
    TaxiPlace:
      description: Place used in taxi mode
      oneOf:
      - "$ref": "#/components/schemas/Place"
      - "$ref": "#/components/schemas/StationPlace"
      - "$ref": "#/components/schemas/AccessPointPlace"
      - "$ref": "#/components/schemas/ParkingLotPlace"
      - "$ref": "#/components/schemas/ChargingStationPlace"
      discriminator:
        propertyName: type
        mapping:
          place: "#/components/schemas/Place"
          station: "#/components/schemas/StationPlace"
          accessPoint: "#/components/schemas/AccessPointPlace"
          parkingLot: "#/components/schemas/ParkingLotPlace"
          chargingStation: "#/components/schemas/ChargingStationPlace"
    TollCost:
      description: 'Information for a single toll payment.

'
      properties:
        tollSystem:
          description: 'Name of the toll system collecting the toll.

'
          type: string
          deprecated: true
        tollSystemRef:
          description: 'Reference index of the affected toll system in the `tollSystems`
            array.

'
          type: integer
        countryCode:
          "$ref": "#/components/schemas/CountryCode"
        tollCollectionLocations:
          description: |
            Information about the location(s) of the toll places where the fare is collected. In case of entry/exit tolls
            measured by distance, both entry and exit toll locations are returned. Note that since payment is at only one of
            these places (normally the exit), the other place *may* be in an unrelated section.
          type: array
          items:
            "$ref": "#/components/schemas/TollCollectionLocation"
        fares:
          description: |
            List of possible `Fare`s to pay, which may depend on time of day, payment method, vehicle characteristics, etc.

            **Note**: The router presents only options relevant to the original query, on a best effort basis.
            Note that a `Fare` for tolls is always a `SinglePrice`.
          type: array
          items:
            "$ref": "#/components/schemas/Fare"
      required:
      - tollSystem
      - tollSystemRef
      - fares
    TollSummary:
      description: 'Summary of the tolls grouped by criteria (total, per system, per
        country)

'
      properties:
        total:
          description: 'Total toll to be paid for the section, in the requested currency.

'
          "$ref": "#/components/schemas/FarePrice"
        totalBySystem:
          description: 'Total tolls to be paid in the section, grouped per toll system.

'
          type: array
          items:
            "$ref": "#/components/schemas/TollSystemSummary"
        totalByCountry:
          description: 'Total tolls to be paid in the section, grouped per country.

'
          type: array
          items:
            "$ref": "#/components/schemas/TollCountrySummary"
    TransitSection:
      description: A section of the route. It contains departure, arrival, and route
        information.
      properties:
        id:
          description: Unique identifier of the section
          type: string
        type:
          description: Section type used by the client to identify what extension
            to the BaseSection are available.
          type: string
        preActions:
          description: Actions that must be done prior to `departure`.
          type: array
          items:
            "$ref": "#/components/schemas/TransitPreAction"
        actions:
          description: |
            Actions that must be done during the travel portion of the section, i.e., between `departure` and `arrival`.

            *NOTE:* currentRoad and nextRoad are not populated for actions.
          type: array
          items:
            "$ref": "#/components/schemas/OffsetAction"
        language:
          description: Language of the localized strings in the section, if any, in
            BCP47 format.
          type: string
        postActions:
          description: Actions that must be done after `arrival`.
          type: array
          items:
            "$ref": "#/components/schemas/TransitPostAction"
        turnByTurnActions:
          description: Actions for turn by turn guidance during the travel portion
            of the section, i.e., between `departure` and `arrival`.
          type: array
          items:
            "$ref": "#/components/schemas/OffsetAction"
        departure:
          "$ref": "#/components/schemas/TransitDeparture"
        arrival:
          "$ref": "#/components/schemas/TransitDeparture"
        passthrough:
          description: |
            List of via waypoints this section is passing through.

            Each via waypoint of the request that is a `passThrough=true` waypoint, appears as a
            `Passthrough` in the response. It appears in the section that starts with the closest
            non-passthrough via specified before it or origin.

            The passthrough vias appear in this list in the order they are traversed. They are
            traversed in the order they are specified in the request.
          type: array
          items:
            "$ref": "#/components/schemas/Passthrough"
        summary:
          description: |
            Total value of key attributes (e.g., duration, length) summed up for the entire section, including `preActions`, `postActions`,
            and the travel portion of the section.
          allOf:
          - "$ref": "#/components/schemas/BaseSummary"
        travelSummary:
          description: |
            Total value of key attributes (e.g., duration, length) summed up for just the travel portion of the section,
            between `departure` and `arrival`. `preActions` and `postActions` are excluded.
          allOf:
          - "$ref": "#/components/schemas/BaseSummary"
        polyline:
          "$ref": "#/components/schemas/Polyline"
        notices:
          description: 'Contains a list of issues related to this section of the route.

'
          type: array
          items:
            "$ref": "#/components/schemas/TransitNotice"
        transport:
          "$ref": "#/components/schemas/TransitTransport"
        intermediateStops:
          description: 'Intermediate stops between departure and destination of the
            transit line. It can be missing if this information is not available or
            not requested.

'
          type: array
          items:
            "$ref": "#/components/schemas/TransitStop"
        agency:
          "$ref": "#/components/schemas/Agency"
        attributions:
          description: List of required attributions to display.
          type: array
          items:
            "$ref": "#/components/schemas/Attribution"
        fares:
          description: List of tickets to pay for this section of the route
          type: array
          items:
            "$ref": "#/components/schemas/Fare"
        booking:
          description: "**NOTE:** Attribute booking is deprecated. Please, use bookingLinks
            instead of it.\n"
          deprecated: true
          "$ref": "#/components/schemas/WebLink"
        bookingLinks:
          description: '"Links to external ticket booking services"

'
          type: array
          items:
            "$ref": "#/components/schemas/WebLinkWithDeviceType"
        spans:
          type: array
          description: 'Span attached to a `Section` describing transit content.

'
          items:
            "$ref": "#/components/schemas/TransitSpan"
        incidents:
          description: A list of all incidents that apply to the section.
          type: array
          items:
            "$ref": "#/components/schemas/TransitIncident"
      required:
      - id
      - type
      - departure
      - arrival
    VehiclePlace:
      description: Place used in vehicle routing.
      oneOf:
      - "$ref": "#/components/schemas/Place"
      - "$ref": "#/components/schemas/StationPlace"
      - "$ref": "#/components/schemas/AccessPointPlace"
      - "$ref": "#/components/schemas/ParkingLotPlace"
      - "$ref": "#/components/schemas/ChargingStationPlace"
      discriminator:
        propertyName: type
        mapping:
          place: "#/components/schemas/Place"
          station: "#/components/schemas/StationPlace"
          accessPoint: "#/components/schemas/AccessPointPlace"
          parkingLot: "#/components/schemas/ParkingLotPlace"
          chargingStation: "#/components/schemas/ChargingStationPlace"
    PedestrianAction:
      description: Action attached to a pedestrian section.
      oneOf:
      - "$ref": "#/components/schemas/DepartAction"
      - "$ref": "#/components/schemas/ArriveAction"
      - "$ref": "#/components/schemas/ContinueAction"
      - "$ref": "#/components/schemas/RampAction"
      - "$ref": "#/components/schemas/ExitAction"
      - "$ref": "#/components/schemas/RoundaboutPassAction"
      - "$ref": "#/components/schemas/RoundaboutEnterAction"
      - "$ref": "#/components/schemas/RoundaboutExitAction"
      - "$ref": "#/components/schemas/UTurnAction"
      - "$ref": "#/components/schemas/TurnAction"
      - "$ref": "#/components/schemas/KeepAction"
      discriminator:
        propertyName: action
        mapping:
          depart: "#/components/schemas/DepartAction"
          arrive: "#/components/schemas/ArriveAction"
          continue: "#/components/schemas/ContinueAction"
          ramp: "#/components/schemas/RampAction"
          exit: "#/components/schemas/ExitAction"
          roundaboutPass: "#/components/schemas/RoundaboutPassAction"
          roundaboutEnter: "#/components/schemas/RoundaboutEnterAction"
          roundaboutExit: "#/components/schemas/RoundaboutExitAction"
          uTurn: "#/components/schemas/UTurnAction"
          turn: "#/components/schemas/TurnAction"
          keep: "#/components/schemas/KeepAction"
    PedestrianDeparture:
      description: Departure of pedestrian
      properties:
        time:
          description: Expected time of departure of the event. Format is **RFC 3339**,
            section 5.6 as defined by `date-time`.
          allOf:
          - "$ref": "#/components/schemas/Time"
        place:
          "$ref": "#/components/schemas/PedestrianPlace"
      required:
      - place
    TaxiDeparture:
      description: Departure
      properties:
        time:
          description: Expected time of departure of the event. Format is **RFC 3339**,
            section 5.6 as defined by `date-time`.
          allOf:
          - "$ref": "#/components/schemas/Time"
        place:
          "$ref": "#/components/schemas/TaxiPlace"
      required:
      - place
    VehicleAction:
      description: Action attached to a vehicle section.
      oneOf:
      - "$ref": "#/components/schemas/DepartAction"
      - "$ref": "#/components/schemas/ArriveAction"
      - "$ref": "#/components/schemas/ContinueAction"
      - "$ref": "#/components/schemas/RampAction"
      - "$ref": "#/components/schemas/ExitAction"
      - "$ref": "#/components/schemas/RoundaboutPassAction"
      - "$ref": "#/components/schemas/RoundaboutEnterAction"
      - "$ref": "#/components/schemas/RoundaboutExitAction"
      - "$ref": "#/components/schemas/UTurnAction"
      - "$ref": "#/components/schemas/TurnAction"
      - "$ref": "#/components/schemas/KeepAction"
      discriminator:
        propertyName: action
        mapping:
          depart: "#/components/schemas/DepartAction"
          arrive: "#/components/schemas/ArriveAction"
          continue: "#/components/schemas/ContinueAction"
          ramp: "#/components/schemas/RampAction"
          exit: "#/components/schemas/ExitAction"
          roundaboutPass: "#/components/schemas/RoundaboutPassAction"
          roundaboutEnter: "#/components/schemas/RoundaboutEnterAction"
          roundaboutExit: "#/components/schemas/RoundaboutExitAction"
          uTurn: "#/components/schemas/UTurnAction"
          turn: "#/components/schemas/TurnAction"
          keep: "#/components/schemas/KeepAction"
    VehicleDeparture:
      description: Describe a departure or arrival location and time.
      properties:
        time:
          description: Expected time of departure of the event. Format is **RFC 3339**,
            section 5.6 as defined by `date-time`.
          allOf:
          - "$ref": "#/components/schemas/Time"
        place:
          "$ref": "#/components/schemas/VehiclePlace"
        charge:
          description: Vehicle battery charge (in kWh).
          type: number
      required:
      - place
    VehicleTravelSummary:
      description: Total value of key attributes for a route section.
      properties:
        duration:
          "$ref": "#/components/schemas/Duration"
        length:
          "$ref": "#/components/schemas/Distance"
        consumption:
          description: |
            Estimated net energy consumption (in kWh) for the travel only.
            Does not include any charging at stations.
          "$ref": "#/components/schemas/Energy"
        baseDuration:
          description: |
            Duration (in seconds) ignoring time-aware information.

            In particular, dynamic traffic information is not taken into account. Only average
            free-flow speeds based on historical traffic are used to calculate this duration.

            The `baseDuration` can also be understood as the best possible duration.
          allOf:
          - "$ref": "#/components/schemas/Duration"
        typicalDuration:
          description: |
            Duration (in seconds) under typical traffic conditions.

            In particular, dynamic traffic information is not taken into account. Instead,
            speeds that are typical for the given time of day/day of week based on historical
            traffic are used to calculate this duration.
          allOf:
          - "$ref": "#/components/schemas/Duration"
        mlDuration:
          description: |
            Duration (in seconds) based on the region-specific machine learning model.

            `mlDuration` is calculated for each route section of the route.
            If a section of the route is not supported, `mlDuration` is not present in the summary of that section and a notice with the reason is provided.
            `mlDuration` is only calculated for the entire section. The sum of span durations is not equivalent to `mlDuration`.
          allOf:
          - "$ref": "#/components/schemas/Duration"
        tolls:
          description: |
            Summary of tolls to be paid for this section of the route (if any), grouped as requested in the `tolls` parameter.
            This element only appears in the response if at least one grouping criteria was requested.
          "$ref": "#/components/schemas/TollSummary"
      required:
      - duration
      - length
    PedestrianSection:
      description: Represent a section of a route
      properties:
        id:
          description: Unique identifier of the section
          type: string
        type:
          description: Section type used by the client to identify what extension
            to the BaseSection are available.
          type: string
        preActions:
          description: Actions that must be done prior to `departure`.
          type: array
          items:
            "$ref": "#/components/schemas/BaseAction"
        actions:
          description: |
            Actions to be performed at or during a specific portion of a section.

            Action offsets are the coordinate index in the polyline.

            *NOTE:* currentRoad and nextRoad are not populated for actions.
          type: array
          items:
            "$ref": "#/components/schemas/PedestrianAction"
        language:
          description: Language of the localized strings in the section, if any, in
            BCP47 format.
          type: string
        postActions:
          description: Actions that must be done after `arrival`.
          type: array
          items:
            "$ref": "#/components/schemas/PedestrianPostAction"
        turnByTurnActions:
          description: Actions for turn by turn guidance during the travel portion
            of the section, i.e., between `departure` and `arrival`.
          type: array
          items:
            "$ref": "#/components/schemas/OffsetAction"
        departure:
          "$ref": "#/components/schemas/PedestrianDeparture"
        arrival:
          "$ref": "#/components/schemas/PedestrianDeparture"
        passthrough:
          description: |
            List of via waypoints this section is passing through.

            Each via waypoint of the request that is a `passThrough=true` waypoint, appears as a
            `Passthrough` in the response. It appears in the section that starts with the closest
            non-passthrough via specified before it or origin.

            The passthrough vias appear in this list in the order they are traversed. They are
            traversed in the order they are specified in the request.
          type: array
          items:
            "$ref": "#/components/schemas/Passthrough"
        summary:
          description: |
            Total value of key attributes (e.g. duration, length) summed up for the entire section, including `preActions`, `postActions`,
            and the travel portion of the section.
          allOf:
          - "$ref": "#/components/schemas/PedestrianSummary"
        travelSummary:
          description: |
            Total value of key attributes (e.g., duration, length) summed up for just the travel portion of the section,
            between `departure` and `arrival`. `preActions` and `postActions` are excluded.
          allOf:
          - "$ref": "#/components/schemas/BaseSummary"
        polyline:
          "$ref": "#/components/schemas/Polyline"
        notices:
          description: 'Contains a list of issues related to this section of the route.

'
          type: array
          items:
            "$ref": "#/components/schemas/PedestrianNotice"
        transport:
          "$ref": "#/components/schemas/PedestrianTransport"
        spans:
          description: 'Spans attached to a `Section` describing pedestrian content.

'
          type: array
          items:
            "$ref": "#/components/schemas/PedestrianSpan"
        refReplacements:
          description: 'Dictionary of placeholders to replacement strings for the
            compact representation of map entity references.

'
          type: object
          additionalProperties:
            type: string
      required:
      - id
      - type
      - departure
      - arrival
      - transport
    TaxiSection:
      description: Represent a section of a route
      properties:
        id:
          description: Unique identifier of the section
          type: string
        type:
          description: Section type used by the client to identify what extension
            to the BaseSection are available.
          type: string
        preActions:
          description: Actions that must be done prior to `departure`.
          type: array
          items:
            "$ref": "#/components/schemas/TaxiPreAction"
        actions:
          description: |
            Actions that must be done during the travel portion of the section, i.e., between `departure` and `arrival`.

            *NOTE:* currentRoad and nextRoad are not populated for actions.
          type: array
          items:
            "$ref": "#/components/schemas/OffsetAction"
        language:
          description: Language of the localized strings in the section, if any, in
            BCP47 format.
          type: string
        postActions:
          description: Actions that must be done after `arrival`.
          type: array
          items:
            "$ref": "#/components/schemas/BaseAction"
        turnByTurnActions:
          description: Actions for turn by turn guidance during the travel portion
            of the section, i.e., between `departure` and `arrival`.
          type: array
          items:
            "$ref": "#/components/schemas/OffsetAction"
        departure:
          "$ref": "#/components/schemas/TaxiDeparture"
        arrival:
          "$ref": "#/components/schemas/TaxiDeparture"
        passthrough:
          description: |
            List of via waypoints this section is passing through.

            Each via waypoint of the request that is a `passThrough=true` waypoint, appears as a
            `Passthrough` in the response. It appears in the section that starts with the closest
            non-passthrough via specified before it or origin.

            The passthrough vias appear in this list in the order they are traversed. They are
            traversed in the order they are specified in the request.
          type: array
          items:
            "$ref": "#/components/schemas/Passthrough"
        summary:
          description: |
            Total value of key attributes (e.g., duration, length) summed up for the entire section, including `preActions`, `postActions`,
            and the travel portion of the section.
          allOf:
          - "$ref": "#/components/schemas/BaseSummary"
        travelSummary:
          description: |
            Total value of key attributes (e.g., duration, length) summed up for just the travel portion of the section,
            between `departure` and `arrival`. `preActions` and `postActions` are excluded.
          allOf:
          - "$ref": "#/components/schemas/BaseSummary"
        polyline:
          "$ref": "#/components/schemas/Polyline"
        notices:
          description: Contains a list of issues encountered during the processing
            of this response.
          type: array
          items:
            "$ref": "#/components/schemas/Notice"
        transport:
          "$ref": "#/components/schemas/TaxiTransport"
        agency:
          "$ref": "#/components/schemas/Agency"
        attributions:
          description: List of required provider attributions to display.
          type: array
          items:
            "$ref": "#/components/schemas/Attribution"
        fares:
          description: List of fares/tickets to be paid for this section of the route
          type: array
          items:
            "$ref": "#/components/schemas/Fare"
      required:
      - id
      - type
      - departure
      - arrival
      - transport
      - agency
    VehicleSection:
      description: Represent a section of a route
      properties:
        id:
          description: Unique identifier of the section
          type: string
        type:
          description: Section type used by the client to identify what extension
            to the BaseSection are available.
          type: string
        preActions:
          description: Actions that must be done prior to `departure`.
          type: array
          items:
            "$ref": "#/components/schemas/BaseAction"
        actions:
          description: |
            Actions to be performed at or during a specific portion of a section.

            Action offsets are the coordinate index in the polyline.

            *NOTE:* currentRoad and nextRoad are not populated for actions.
          type: array
          items:
            "$ref": "#/components/schemas/VehicleAction"
        language:
          description: Language of the localized strings in the section, if any, in
            BCP47 format.
          type: string
        postActions:
          description: Actions that must be done after `arrival`.
          type: array
          items:
            "$ref": "#/components/schemas/BaseAction"
        turnByTurnActions:
          description: |
            Actions for turn by turn guidance.

            Action offsets are the coordinate index in the polyline.
          type: array
          items:
            "$ref": "#/components/schemas/VehicleAction"
        departure:
          "$ref": "#/components/schemas/VehicleDeparture"
        arrival:
          "$ref": "#/components/schemas/VehicleDeparture"
        passthrough:
          description: |
            List of via waypoints this section is passing through.

            Each via waypoint of the request that is a `passThrough=true` waypoint, appears as a
            `Passthrough` in the response. It appears in the section that starts with the closest
            non-passthrough via specified before it or origin.

            The passthrough vias appear in this list in the order they are traversed. They are
            traversed in the order they are specified in the request.
          type: array
          items:
            "$ref": "#/components/schemas/Passthrough"
        summary:
          description: |
            Total value of key attributes (e.g., duration, length, consumption) summed up for the entire section, including `preActions`, `postActions`,
            and the travel portion of the section.
          allOf:
          - "$ref": "#/components/schemas/VehicleSummary"
        travelSummary:
          description: |
            Total value of key attributes (e.g., duration, length, consumption) summed up for just the travel portion of the section,
            between `departure` and `arrival`. `preActions` and `postActions` are excluded.
          allOf:
          - "$ref": "#/components/schemas/VehicleTravelSummary"
        polyline:
          "$ref": "#/components/schemas/Polyline"
        notices:
          description: |
            Contains a list of issues related to this section of the route.

            Notices must be carefully evaluated and the route section should be discarded
            if appropriate.
            In particular, the user should be aware that new notice codes may be added at any time. If an unrecognized
            notice code appears with a `critical` severity level, the route section must be discarded.
            Please refer to the `code` attribute for possible values.
          type: array
          items:
            "$ref": "#/components/schemas/VehicleNotice"
        spans:
          description: 'Spans attached to a `Section` describing vehicle content.

'
          type: array
          items:
            "$ref": "#/components/schemas/VehicleSpan"
        routingZones:
          description: |
            A list of routing zones that are applicable to the section.

            Elements of this list will be referenced by indices within the `span` attribute of the section.
          type: array
          items:
            "$ref": "#/components/schemas/RoutingZone"
        truckRoadTypes:
          description: |
            A list of truck road types that are applicable to the section.

            Elements of this list will be referenced by indices within the `span` attribute of the section.

            A truck road type is an identifier associated with roads that have additional regulations applied by local administration for
            traversal by heavy vehicles like trucks. For example, the BK Bearing Class regulations in Sweden, and ET categories in Mexico.
            The identifiers of supported truck road types are specified at HERE Map Content
            [TruckRoadType](https://developer.here.com/documentation/here-map-content/dev_guide/topics_schema/truckroadtypeattribute.truckroadtype.html).

            These names should be provided when avoiding a certain truck road type.
          type: array
          items:
            type: string
        incidents:
          description: A list of all incidents that apply to the section.
          type: array
          items:
            "$ref": "#/components/schemas/TrafficIncident"
        refReplacements:
          description: 'Dictionary of placeholders to replacement strings for the
            compact representation of map entity references.

'
          type: object
          additionalProperties:
            type: string
        tollSystems:
          description: 'An array of toll authorities that collect payments for the
            use of (part of) this section of the route.

'
          type: array
          items:
            "$ref": "#/components/schemas/TollSystem"
        tolls:
          description: 'Detail of tolls to be paid for traversing this section.

'
          type: array
          items:
            "$ref": "#/components/schemas/TollCost"
        transport:
          "$ref": "#/components/schemas/VehicleTransport"
        fares:
          description: List of fares for this section of the route
          type: array
          items:
            "$ref": "#/components/schemas/Fare"
      required:
      - id
      - type
      - departure
      - arrival
      - transport
    RentedSection:
      description: A vehicle section extended with extra information in the case is
        rented
      properties:
        id:
          description: Unique identifier of the section
          type: string
        type:
          description: Section type used by the client to identify what extension
            to the BaseSection are available.
          type: string
        preActions:
          description: Actions that must be done prior to `departure`.
          type: array
          items:
            "$ref": "#/components/schemas/RentedPreAction"
        actions:
          description: |
            Actions to be performed at or during a specific portion of a section.

            Action offsets are the coordinate index in the polyline.

            *NOTE:* currentRoad and nextRoad are not populated for actions.
          type: array
          items:
            "$ref": "#/components/schemas/VehicleAction"
        language:
          description: Language of the localized strings in the section, if any, in
            BCP47 format.
          type: string
        postActions:
          description: Actions that must be done after `arrival`.
          type: array
          items:
            "$ref": "#/components/schemas/RentedPostAction"
        turnByTurnActions:
          description: |
            Actions for turn by turn guidance.

            Action offsets are the coordinate index in the polyline.
          type: array
          items:
            "$ref": "#/components/schemas/VehicleAction"
        departure:
          "$ref": "#/components/schemas/VehicleDeparture"
        arrival:
          "$ref": "#/components/schemas/VehicleDeparture"
        passthrough:
          description: |
            List of via waypoints this section is passing through.

            Each via waypoint of the request that is a `passThrough=true` waypoint, appears as a
            `Passthrough` in the response. It appears in the section that starts with the closest
            non-passthrough via specified before it or origin.

            The passthrough vias appear in this list in the order they are traversed. They are
            traversed in the order they are specified in the request.
          type: array
          items:
            "$ref": "#/components/schemas/Passthrough"
        summary:
          description: |
            Total value of key attributes (e.g., duration, length, consumption) summed up for the entire section, including `preActions`, `postActions`,
            and the travel portion of the section.
          allOf:
          - "$ref": "#/components/schemas/VehicleSummary"
        travelSummary:
          description: |
            Total value of key attributes (e.g., duration, length, consumption) summed up for just the travel portion of the section,
            between `departure` and `arrival`. `preActions` and `postActions` are excluded.
          allOf:
          - "$ref": "#/components/schemas/VehicleTravelSummary"
        polyline:
          "$ref": "#/components/schemas/Polyline"
        notices:
          description: |
            Contains a list of issues related to this section of the route.

            Notices must be carefully evaluated and the route section should be discarded
            if appropriate.
            In particular, the user should be aware that new notice codes may be added at any time. If an unrecognized
            notice code appears with a `critical` severity level, the route section must be discarded.
            Please refer to the `code` attribute for possible values.
          type: array
          items:
            "$ref": "#/components/schemas/VehicleNotice"
        spans:
          description: 'Spans attached to a `Section` describing vehicle content.

'
          type: array
          items:
            "$ref": "#/components/schemas/VehicleSpan"
        routingZones:
          description: |
            A list of routing zones that are applicable to the section.

            Elements of this list will be referenced by indices within the `span` attribute of the section.
          type: array
          items:
            "$ref": "#/components/schemas/RoutingZone"
        truckRoadTypes:
          description: |
            A list of truck road types that are applicable to the section.

            Elements of this list will be referenced by indices within the `span` attribute of the section.

            A truck road type is an identifier associated with roads that have additional regulations applied by local administration for
            traversal by heavy vehicles like trucks. For example, the BK Bearing Class regulations in Sweden, and ET categories in Mexico.
            The identifiers of supported truck road types are specified at HERE Map Content
            [TruckRoadType](https://developer.here.com/documentation/here-map-content/dev_guide/topics_schema/truckroadtypeattribute.truckroadtype.html).

            These names should be provided when avoiding a certain truck road type.
          type: array
          items:
            type: string
        incidents:
          description: A list of all incidents that apply to the section.
          type: array
          items:
            "$ref": "#/components/schemas/TrafficIncident"
        refReplacements:
          description: 'Dictionary of placeholders to replacement strings for the
            compact representation of map entity references.

'
          type: object
          additionalProperties:
            type: string
        tollSystems:
          description: 'An array of toll authorities that collect payments for the
            use of (part of) this section of the route.

'
          type: array
          items:
            "$ref": "#/components/schemas/TollSystem"
        tolls:
          description: 'Detail of tolls to be paid for traversing this section.

'
          type: array
          items:
            "$ref": "#/components/schemas/TollCost"
        transport:
          "$ref": "#/components/schemas/RentedTransport"
        fares:
          description: List of fares for this section of the route
          type: array
          items:
            "$ref": "#/components/schemas/Fare"
        agency:
          "$ref": "#/components/schemas/Agency"
        attributions:
          description: List of required provider attributions to display.
          type: array
          items:
            "$ref": "#/components/schemas/Attribution"
      required:
      - id
      - type
      - departure
      - arrival
      - transport
      - agency
    IntermodalSection:
      description: One of the possible sections that can appear in an intermodal route.
      oneOf:
      - "$ref": "#/components/schemas/PedestrianSection"
      - "$ref": "#/components/schemas/VehicleSection"
      - "$ref": "#/components/schemas/TransitSection"
      - "$ref": "#/components/schemas/TaxiSection"
      - "$ref": "#/components/schemas/RentedSection"
      discriminator:
        propertyName: type
        mapping:
          pedestrian: "#/components/schemas/PedestrianSection"
          vehicle: "#/components/schemas/VehicleSection"
          transit: "#/components/schemas/TransitSection"
          taxi: "#/components/schemas/TaxiSection"
          rented: "#/components/schemas/RentedSection"
    IntermodalRoute:
      description: Describes a full journey to reach a given destination.
      properties:
        id:
          description: Unique identifier of the route
          type: string
        notices:
          description: |
            Contains a list of issues related to this route.

            Follows a list of possible notice codes:

            * `changeOptionViolated`: This route contains more changes than what was allowed by
              the `changes` parameter.
            * `nonviableRoute`: Based on the realtime situation, one or more changes on the route
              are not possible. This can happen if realtime re-routing is not available on this area.
          type: array
          items:
            "$ref": "#/components/schemas/Notice"
        sections:
          type: array
          items:
            "$ref": "#/components/schemas/IntermodalSection"
          description: A section of the intermodal route
      required:
      - id
      - sections
    IntermodalRouteResponse:
      description: Returns a list of routes.
      properties:
        notices:
          description: Contains a list of issues encountered during the processing
            of this response.
          type: array
          items:
            "$ref": "#/components/schemas/Notice"
        routes:
          description: List of possible intermodal routes
          type: array
          items:
            "$ref": "#/components/schemas/IntermodalRoute"
      required:
      - routes
  responses:
    400ErrorResponse:
      description: API response in case of bad request.
      headers:
        X-Correlation-Id:
          "$ref": "#/components/headers/X-Correlation-Id"
      content:
        application/json:
          schema:
            allOf:
            - "$ref": "#/components/schemas/ErrorResponse"
          examples:
            errorResponseExample:
              "$ref": "#/components/examples/400errorResponseExample"
    401ErrorResponse:
      description: API response in case of unauthorized access.
      content:
        application/json:
          schema:
            "$ref": "#/components/schemas/AuthErrorResponseSchema"
          examples:
            errorResponseExample:
              "$ref": "#/components/examples/401errorResponseExample"
    403ErrorResponse:
      description: API response in case of forbidden access.
      content:
        application/json:
          schema:
            "$ref": "#/components/schemas/AuthErrorResponseSchema"
          examples:
            errorResponseExample:
              "$ref": "#/components/examples/403errorResponseExample"
    500ErrorResponse:
      description: API response in case of internal server error.
      headers:
        X-Correlation-Id:
          "$ref": "#/components/headers/X-Correlation-Id"
      content:
        application/json:
          schema:
            allOf:
            - "$ref": "#/components/schemas/ErrorResponse"
          examples:
            errorResponseExample:
              "$ref": "#/components/examples/500errorResponseExample"
    502ErrorResponse:
      description: API response in case of bad gateway.
      headers:
        X-Correlation-Id:
          "$ref": "#/components/headers/X-Correlation-Id"
      content:
        application/json:
          schema:
            allOf:
            - "$ref": "#/components/schemas/ErrorResponse"
          examples:
            errorResponseExample:
              "$ref": "#/components/examples/502errorResponseExample"
    503ErrorResponse:
      description: API response in case of service unavailable.
      headers:
        X-Correlation-Id:
          "$ref": "#/components/headers/X-Correlation-Id"
      content:
        application/json:
          schema:
            allOf:
            - "$ref": "#/components/schemas/ErrorResponse"
          examples:
            errorResponseExample:
              "$ref": "#/components/examples/503errorResponseExample"
    504ErrorResponse:
      description: API response in case of gateway timeout.
      headers:
        X-Correlation-Id:
          "$ref": "#/components/headers/X-Correlation-Id"
      content:
        application/json:
          schema:
            allOf:
            - "$ref": "#/components/schemas/ErrorResponse"
          examples:
            errorResponseExample:
              "$ref": "#/components/examples/504errorResponseExample"
    HealthResponseFail:
      description: API response in case of failure.
      content:
        application/json:
          schema:
            "$ref": "#/components/schemas/HealthResponseFailSchema"
        text/plain: {}
    HealthResponseOk:
      description: API response in case of success.
      content:
        application/json:
          schema:
            "$ref": "#/components/schemas/HealthResponseOKSchema"
    VersionResponseOk:
      description: API response in case of success.
      content:
        application/json:
          schema:
            allOf:
            - "$ref": "#/components/schemas/VersionResponse"
  examples:
    400errorResponseExample:
      value:
        title: 'failed with reason: missing field `destination`'
        status: 400
        code: E600000
        cause: Bad request
        action: ''
        correlationId: ''
    401errorResponseExample:
      value:
        error: Unauthorized
        error_description: No credentials found
    403errorResponseExample:
      value:
        error: Forbidden
        error_description: These credentials do not authorize access.
    500errorResponseExample:
      value:
        title: 'failed with reason: internal server error'
        status: 500
        code: E600103
        cause: Internal Server Error
        action: ''
        correlationId: ''
    502errorResponseExample:
      value:
        title: 'failed with reason: bad gateway'
        status: 502
        code: E600002
        cause: Bad Gateway
        action: ''
        correlationId: ''
    503errorResponseExample:
      value:
        title: 'failed with reason: service unavailable'
        status: 503
        code: E600001
        cause: Service Unavailable
        action: ''
        correlationId: ''
    504errorResponseExample:
      value:
        title: 'failed with reason: gateway timeout'
        status: 504
        code: E600000
        cause: Gateway Timeout
        action: ''
        correlationId: ''
    noticeWithRestrictionsExample:
      description: |
        Example of a notice indicating violation of a restriction that applies to vehicles
        over 12 tons and having between 2 and 4 axles (inclusive).
      value:
        title: Violated vehicle restriction.
        code: violatedVehiceRestriction
        severity: critical
        details:
        - cause: Route violates vehicle restriction
          type: restriction
          maxGrossWeight: 12000
          axleCount:
            from: 2
            to: 4
    restrictionExample:
      description: |
        Example modeling the following set of conditions which apply on one section of a road:
        * 12t weight
        * 3m height
        * forbidden transportation of gas
      value:
        type: restriction
        maxGrossWeight: 12000
        maxHeight: 300
        forbiddenHazardousGoods:
        - gas
