=begin
#Geocoding and Search API v7

#This document describes the Geocoding and Search API.

The version of the OpenAPI document: 7.83

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.4.0

=end

require 'date'
require 'time'

module HereGeocodingSearch
  class AutocompleteResultItem
    # The unified display name of this result item. The result title is composed so that the customer application can use it to render the suggestions with highlighting. It is build in a unified way for all the countries starting from the country name and down to the address line. It is build out of the address components that are important for the end-user to recognize and eventually to choose a result and includes all the input terms. For example: \"Germany, 32547, Bad Oeynhausen, SchulstraÃŸe 4\"
    attr_accessor :title

    # The unique identifier for the result item. This ID can be used for a Look Up by ID search as well.
    attr_accessor :id

    # The preferred language of address elements in the result.
    attr_accessor :language

    # ISO3 country code of the item political view (default for international). This response element is populated when the politicalView parameter is set in the query
    attr_accessor :political_view

    # WARNING: The resultType values 'intersection' and 'postalCodePoint' are in BETA state
    attr_accessor :result_type

    attr_accessor :house_number_type

    attr_accessor :locality_type

    attr_accessor :administrative_area_type

    # Detailed address of the result item.
    attr_accessor :address

    # The distance \\\"as the crow flies\\\" from the search center to this result item in meters. For example: \\\"172039\\\".  When searching along a route this is the distance\\nalong the route plus the distance from the route polyline to this result item.
    attr_accessor :distance

    # Describes how the parts of the response element matched the input query
    attr_accessor :highlights

    # Street Details (only rendered if 'show=streetInfo' is provided.)
    attr_accessor :street_info

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'title' => :'title',
        :'id' => :'id',
        :'language' => :'language',
        :'political_view' => :'politicalView',
        :'result_type' => :'resultType',
        :'house_number_type' => :'houseNumberType',
        :'locality_type' => :'localityType',
        :'administrative_area_type' => :'administrativeAreaType',
        :'address' => :'address',
        :'distance' => :'distance',
        :'highlights' => :'highlights',
        :'street_info' => :'streetInfo'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'title' => :'String',
        :'id' => :'String',
        :'language' => :'String',
        :'political_view' => :'String',
        :'result_type' => :'String',
        :'house_number_type' => :'String',
        :'locality_type' => :'String',
        :'administrative_area_type' => :'String',
        :'address' => :'Address',
        :'distance' => :'Integer',
        :'highlights' => :'TitleAndAddressHighlighting',
        :'street_info' => :'Array<StreetInfo>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'address',
        :'highlights',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `HereGeocodingSearch::AutocompleteResultItem` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `HereGeocodingSearch::AutocompleteResultItem`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'title')
        self.title = attributes[:'title']
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'language')
        self.language = attributes[:'language']
      end

      if attributes.key?(:'political_view')
        self.political_view = attributes[:'political_view']
      end

      if attributes.key?(:'result_type')
        self.result_type = attributes[:'result_type']
      end

      if attributes.key?(:'house_number_type')
        self.house_number_type = attributes[:'house_number_type']
      end

      if attributes.key?(:'locality_type')
        self.locality_type = attributes[:'locality_type']
      end

      if attributes.key?(:'administrative_area_type')
        self.administrative_area_type = attributes[:'administrative_area_type']
      end

      if attributes.key?(:'address')
        self.address = attributes[:'address']
      end

      if attributes.key?(:'distance')
        self.distance = attributes[:'distance']
      end

      if attributes.key?(:'highlights')
        self.highlights = attributes[:'highlights']
      end

      if attributes.key?(:'street_info')
        if (value = attributes[:'street_info']).is_a?(Array)
          self.street_info = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @title.nil?
        invalid_properties.push('invalid value for "title", title cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @title.nil?
      result_type_validator = EnumAttributeValidator.new('String', ["administrativeArea", "locality", "street", "intersection", "addressBlock", "houseNumber", "postalCodePoint", "place"])
      return false unless result_type_validator.valid?(@result_type)
      house_number_type_validator = EnumAttributeValidator.new('String', ["PA", "interpolated"])
      return false unless house_number_type_validator.valid?(@house_number_type)
      locality_type_validator = EnumAttributeValidator.new('String', ["postalCode", "subdistrict", "district", "city"])
      return false unless locality_type_validator.valid?(@locality_type)
      administrative_area_type_validator = EnumAttributeValidator.new('String', ["county", "state", "country"])
      return false unless administrative_area_type_validator.valid?(@administrative_area_type)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] result_type Object to be assigned
    def result_type=(result_type)
      validator = EnumAttributeValidator.new('String', ["administrativeArea", "locality", "street", "intersection", "addressBlock", "houseNumber", "postalCodePoint", "place"])
      unless validator.valid?(result_type)
        fail ArgumentError, "invalid value for \"result_type\", must be one of #{validator.allowable_values}."
      end
      @result_type = result_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] house_number_type Object to be assigned
    def house_number_type=(house_number_type)
      validator = EnumAttributeValidator.new('String', ["PA", "interpolated"])
      unless validator.valid?(house_number_type)
        fail ArgumentError, "invalid value for \"house_number_type\", must be one of #{validator.allowable_values}."
      end
      @house_number_type = house_number_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] locality_type Object to be assigned
    def locality_type=(locality_type)
      validator = EnumAttributeValidator.new('String', ["postalCode", "subdistrict", "district", "city"])
      unless validator.valid?(locality_type)
        fail ArgumentError, "invalid value for \"locality_type\", must be one of #{validator.allowable_values}."
      end
      @locality_type = locality_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] administrative_area_type Object to be assigned
    def administrative_area_type=(administrative_area_type)
      validator = EnumAttributeValidator.new('String', ["county", "state", "country"])
      unless validator.valid?(administrative_area_type)
        fail ArgumentError, "invalid value for \"administrative_area_type\", must be one of #{validator.allowable_values}."
      end
      @administrative_area_type = administrative_area_type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          title == o.title &&
          id == o.id &&
          language == o.language &&
          political_view == o.political_view &&
          result_type == o.result_type &&
          house_number_type == o.house_number_type &&
          locality_type == o.locality_type &&
          administrative_area_type == o.administrative_area_type &&
          address == o.address &&
          distance == o.distance &&
          highlights == o.highlights &&
          street_info == o.street_info
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [title, id, language, political_view, result_type, house_number_type, locality_type, administrative_area_type, address, distance, highlights, street_info].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = HereGeocodingSearch.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
